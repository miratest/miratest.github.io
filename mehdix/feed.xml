<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>مهدی صادقی</title>
    <description>سکوی انتشار مطالبی در مورد دانش تولید نرم‌افزار و ایده‌ها و علایق شخصی‌ام.</description>
    <link>https://127.0.0.1:5000/mehdix</link>
    <atom:link href="https://127.0.0.1:5000/mehdix/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate></pubDate>
    <lastBuildDate></lastBuildDate>
    <generator>mira</generator>
    
        <item>
          <title>باگ سیزده ساله تعمیر شد</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;در مطلب قبلی در مورد باگ GTK و تلاشم برای مرج کردن آن نوشته بودم. الان قصد دارم نتیجه‌ی چند ماه دوندگی و همکاری آنلاین را بنویسم.&lt;/p&gt;

&lt;p&gt;ماجرا به طور خلاصه این بود که من از مدتها پیش موقع تایپ فارسی در &lt;code&gt;gedit&lt;/code&gt; و &lt;code&gt;zim&lt;/code&gt; متوجه شده بودم که اگر کلید کنترل را نگه دارم و به چپ و راست حرکت کنم، نشانگر تایپ در جهت عکس حرکت می‌کند. مثل خیلی از آدم‌ها من هم منتظر شدم تا باگ توسط کس دیگری رفع بشود ولی نشد. در مرحله بعدی سعی کردم مشکل را پیدا و گزارش کنم که به ‏&lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=136059&quot;&gt;این باگ&lt;/a&gt; رسیدم. تاریخ باگ را نگاه کنید، سال ۲۰۰۴ ثبت شده است. آن موقع (سال ۲۰۱۵ یا ۱۳۹۴) کل همت من به نوشتن &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=136059#c31&quot;&gt;یک کامنت&lt;/a&gt; خلاصه شد. اینکه بگویم من هم این مشکل را دارم، بلکه کسی دلش به حالم بسوزد و از وقت خودش بزند و بیاید مشکل من را حل بکند!&lt;/p&gt;

&lt;p&gt;خب، ولی کسی دلش نسوخت.&lt;/p&gt;

&lt;p&gt;اگر باگ را دنبال کنید مراحل بعدی را خودتان می‌بینید. بعد از گذشت یکسال دوباره همتم را جمع کردم و اینبار تصمیم گرفتم خودم باگ را درست کنم. با صرف چند روز وقت و سرو کله زدن با GTK و C پچی درست کردم و باگ را با حل کردم که شرحش را در مطلب قبلی آوردم. ولی مهمترین قسمت کار دنبال کردن باگ است. اگر به کامنت‌ها نگاه کنید و به کسانی که باگ‌های مشابه را ثبت کرده‌اند یا این باگ را دنبال کرده‌اند، متوجه می‌شوید که بیشتر افراد آن را دنبال نمی‌کنند و فیدبک نمی‌دهند. کامنت‌های حاوی اطلاعات روشن و مورد نیاز هم کم است. یعنی افراد (مثل خود من قبلا) کامنت می‌گذارند ولی کامنتشان کم ارزش است چون حاوی اطلاعات به درد بخور نیست و کاری هم برای آن انجام نشده است. ولی اگر کسی برنامه را تست بکند و فیدبک بدهد یا پچ را امتحان بکند و خلاصه به طریقی به پیشرفت پروسه‌ی رفع باگ کمک بکند کارش با ارزش است، در غیر اینصورت کسی توجهی به کامنتش نمی‌کند. و احتمالا جوابی هم دریافت نمی‌کند. در این مورد خواندن مقاله‌ی اریک ریموند بسیار سودمند است. اینکه &lt;a href=&quot;http://www.catb.org/esr/faqs/smart-questions.html&quot;&gt;چطور از هکرها هوشمندانه سوال بپرسیم&lt;/a&gt;. جان کلام اینست که پیام باید نشانگر تلاش سوال کننده در جهت حل مشکل باشد (باید مشق شب خودت را انجام داده باشی)، گویا باشد، طلبکارانه نباشد و برای وقت پاسخ‌دهندگان ارزش قائل باشد. در ضمن باید گفتگو را دنبال کرد و در صورت نیاز با اطلاعات دوباره آن را بروزرسانی کرد. اگر پرسشی پرسیده شده باید به سرعت و دقت پاسخ داده بشود و مانند اینها.&lt;/p&gt;

&lt;p&gt;در نهایت بعد از گذشت چند ماه و پیگیری دائمی و رد و بدل کردن چندین و چند پچ و مشارکت عده‌ای از برنامه‌نویسان GTK بالاخره ‬&lt;a href=&quot;https://git.gnome.org/browse/gtk+/commit/?id=0128b8d33f47c9387ee342a1158f3038e02eff49&quot;&gt;پچ نهایی&lt;/a&gt; در مخزن اصلی مرج شد و باگ مورد بحث بعد از گذشت ۱۳ سال فیکس شد. در این مدت دوستم آیدین غریب‌نواز به عنوان کاربر RTL با تست پچ صحت آن را تایید کرد و کامنت گذاشت و دو نفر از برنامه‌نویسان GTK بنام Daniel Bolse و Nelson Benítez León همکاری زیادی برای تولید پچ نهایی کردند.&lt;/p&gt;

&lt;p&gt;به این صورت بعد از مدتی اندک اندک با ریلیزهای بعدی گنوم و GTK این پچ منتشر می‌شود و دیستروها هم در نسخه‌های بعدی‌شان آنرا دریافت خواهند کرد. نکته مهمی که طی فرآیند تعمیر این باگ فهمیدیم این بود که از سیزده سال پیش تا به امروز GTK تغییرات زیادی کرده است و این باگ به تنهایی مشکل gedit را حل نمی‌کند چرا که امروز gedit دیگر از GtkTextView (که تعمیرش کردیم) برای نمایش متن استفاده نمی‌کند و بجای آن از یک ویجت دیگر بنام GtkSourceView استفاده می‌کند. بنابراین در تاریخ ۱۹ فوریه ۲۰۱۷ (اوایل اسفند ۹۵) &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=778928&quot;&gt;باگ جدیدی&lt;/a&gt; ثبت کردم و کار را روی آن شروع کردیم. با کسب تجربه از پیچیدگی‌های باگ قبلی و فرآیند حل آن اینبار با سرعت وارد عمل شدیم (یعنی یکی دو ماه!). هم من یاد گرفته بودم چطور با بچه‌های GTK کار کنم و هم آنها با مشکل راست به چپ نویسی آشنا شده بودند. (مثلا دانیل یاد گرفته بود که خودش متن عربی را تست بکند.)  اول فکر می‌کردیم که باید API ویجت GtkTextView را تغییر بدهیم و همان توابع را در GtkSourceView استفاده کنیم که با واکنش منفی یکی دیگر از برنامه‌نویسان روبرو شد و درخواست کرد که اول تلاش کنیم مشکل را درون GtkSourceView حل کنیم و بار اضافی نگهداری از یک API جدید را به پروژه تحمیل نکنیم. خوشبختانه با مقداری تلاش و همفکری دوستان به &lt;a href=&quot;https://bugzilla.gnome.org/attachment.cgi?id=348936&amp;amp;action=diff&quot;&gt;پچ جدیدی&lt;/a&gt; رسیدیم، حتی خیلی بهتر از پچی که برای GtkTextView نوشته بودیم! پچ به قدری ساده بود که کارها خیلی زود پیش رفت. طبق معمول دوستان اصلاحاتی پیشنهاد کردند که اعمال کردم. مثلا اینکه متن کامیت باید شامل لینک باگزیلا باشد، خط اول آن باید فیکس را شرح بدهد و در بدنه کامیت هم شرح مشکل آمده باشد و در خط آخر هم لینک باگزیلا. خود کد هم باید قواعد رایج GTK و خود ویجت را رعایت کند. مثل تعریف متغیرها در ابتدای کد و استفاده از آکولاد حتی برای بلاک‌های تک خطی و مانند اینها. آزاد کردن اشاره‌گرهای سی هم فراموش نشود!&lt;/p&gt;

&lt;p&gt;با این اوصاف باگ دوم بجای سیزده سال در  کمتر از دو ماه حل شد. حتما تصدیق می‌کنید که پیشرفت قابل توجهی است! پچ حلال مشکلات ما را هم می‌توانید در مخزن GTK ‬&lt;a href=&quot;https://git.gnome.org/browse/gtksourceview/commit/?id=494c76dd359351b8a703b6aec328126b0f84828b&quot;&gt;ببینید&lt;/a&gt;. من که بی صبرانه منتظرم تا آرچ لینوکسم را آپدیت بکنم و از این به بعد هرچقدر دلم می‌خواهد در متن‌های فارسی با کنترل و کلیدهای جهت کیبورد به چپ و راست بروم! واقعا چه لذتی از این بالاتر؟ :)&lt;/p&gt;

&lt;p&gt;این هم عیدی من به کامیونتی راست به چپ نویسان گنوم باز ایران!&lt;/p&gt;</description>
          <pubDate>2017-04-08 07:30:28</pubDate>
          <link>/mehdix/years-old-bug-fixed.html</link>
          <guid isPermaLink="true">/mehdix/years-old-bug-fixed.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>پچ بنویس و التماس کن</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;مدتها بود که مشکلی با برنامه‌های گرافیکی مبتنی بر GTK داشتم. آخرسر همت کردم خودم مشکل رو اصلاح کنم. ولی به زودی فهمیدم اصلاح مشکل ساده‌تر از قبولاندن پچ به نگهدارندگان پروژه است.&lt;/p&gt;

&lt;p&gt;اول مقداری قصه. هر برنامه گرافیکی از کتابخانه‌هایی برای ساختن رابط کاربری‌اش استفاده می‌کنه. در دنیای ویندوز خیلی‌ها از دات‌نت استفاده می‌کنند. اما کلی پروژه دیگر هم هست که قطعات گرافیکی قابل استفاده در برنامه‌ها رو ساختند و قابل استفاده هستند. در دنیای نرم‌افزار آزاد رایج‌ترین تولکیت‌های گرافیکی GTK و Qt هستند. اولی در گنوم به طور گسترده استفاده شده و دومی در KDE. اگر از دسکتاپ‌های شبیه به گنوم استفاده کنیم، چه نسخه سه چه قدیمی‌تر و چه سایر دسکتاپهایی که فورکی از گنوم هستند اکثر برنامه‌های گرافیکیشون با GTK نوشته شده. مثلا برنامه gedit و Zim که من ازشون روزانه استفاده می‌کنم با این تولکیت نوشته شده‌اند.&lt;/p&gt;

&lt;p&gt;حالا مقداری در مورد روال توسعه این برنامه‌ها. در گذشته‌ها که فقط از دور اسم پروژه‌های نرم‌افزار آزاد رو در ایران می‌شنیدم به هر کدام از اونها یا شاید به همشون یکجا مثل یک مدینه‌ی فاضله فکر می‌کردم. تصور اینکه برنامه‌هایی توسط هکرها برای آزادی ما از دست شرکت‌های خبیث نوشته شده! علت جذابیت خاص این مفاهیم شاید زندگی و رشد و نمو در کشوری انقلابی و تغذیه فکری از محصولات فکری نویسندگان معاصر خودمون بود که همگی در این جو زندگی کرده بودند. در مقیاسی بزرگتر هم اونها هم خودشون از  جنبش‌های چپ قرب بیستم تاثیر پذیرفته بودند.&lt;/p&gt;

&lt;p&gt;بنابراین با این پیشفرض‌ها فکر می‌کردم که هر برنامه‌ی آزادی از هر نوع فعالیت داوطلبانه حمایت می‌کنه. ولی متاسفانه کم کم به این نتیجه رسیدم که مدینه‌ی فاضله‌ای در کار نیست و جوامع آنلاینی که حول برنامه‌های شکل می‌گیرند بیشتر نه بر اساس ایدئولوژی بلکه بر اساس نیاز به یک راه حل برای یک مشکل بوجود اومدند. مهمترین چیزی که یاد گرفتم اینه که بیشتر برنامه‌های مهم توسط هکرهای مستقل توسعه داده نمی‌شن بلکه برعکس بیشترشون توسط شرکت‌هایی توسعه داده می‌شن که از اون برنامه به طریقی پول درمیارن. این کار رو برای یک هکر مستقل سخت می‌کنه. جلوتر توضیح می‌دم چرا.&lt;/p&gt;

&lt;p&gt;برگردیم سر مشکل من با GTK. من موقع تایپ فارسی در gedit و Zim متوجه شدم که وقتی کلید کنترل رو با یا بدون شیفت پایین می‌گیریم تا با کلیدهای جهت لغت به لغت در متن حرکت کنیم، جهت حرکت نشانگر تایپ بر خلاف انتظار ما برعکس جهت فشرده شدن کلیدهاست. مثلا همین الان امتحان کنید. اگر کلید جهت سمت راست رو فشار بدین نشانگر می‌ره سمت چپ و برعکس. از جایی که من به دفعات موقع تایپ از این قابلیت استفاده می‌کنم دنبال علت مشکل گشتم. مثلا متوجه شدم در فایرفاکس و کروم این مشکل نیست. مثلا در باکس نوشتن ایمیل جدید داخل جیمیل این مشکل وجود نداره. علت اینه که کروم و فایرفاکس از Webkit استفاده می‌کنند نه GTK. اول تصمیم گرفت که باگ رو گزارش کنم. بلافاصله متوجه شدم که این مشکلی قدیمی است که &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=136059&quot;&gt;گزارشی&lt;/a&gt;‎ در سال ۲۰۰۳ توسط بهداد اسفهبد که خودش از مشارکت‌کنندگان قدیمی GTK است براش ثبت شده. باگ‌های زیادی هم بعد از اون توسط کاربران فارسی و عرب و عبری زبان برای همین مشکل ثبت شده که همگی ارجاع داده شده‌اند به قدیمی‌ترین باگ. باورتون می‌شه باگی ۱۴ سال در انتظار تعمیر باقی بمونه؟ ولی خب مونده.&lt;/p&gt;

&lt;p&gt;من هم کامتنی گذاشتم و یکسال گذشت و خبری نشد و تصمیم گرفتم خودم درستش کنم. کد رو دانلود کردم و شروع کردم به خوندن مستندات پروژه گنوم در مورد GTK. کل پروژه با زبان سی نوشته شده. باید بگم اصلا طوری نوشتن که کاربر تازه‌وارد هیچی نفهمه! اگر خیال می‌کنید که راهنمای درست و حسابی برای مشارکت هست سخت در اشتباهید. حالا این رو هم می‌گم چرا. بالاخره با هزار بدبختی و چند روز وقت گذاشتن و بالا و پایین رفتن در سورس‌فایل‌های چند هزار خطی!! بالاخره مشکل رو فیکس کردم. کلی خوشحال شدم. &lt;a href=&quot;https://bug136059.bugzilla-attachments.gnome.org/attachment.cgi?id=343512&quot;&gt;پچی ساختم&lt;/a&gt; و پیش خودم گفتم الان می‌رم پچ رو سابمیت می‌کنم و کلی فیدبک می‌گیرم و مشکل حل می‌شه، زهی ای خیال باطل!&lt;/p&gt;

&lt;p&gt;یه توضیح مختصر بدم که کلیات کار در پروژه‌های مرتبط با گنوم چیه. اول اینکه برای ثبت مشکل از باگ‌زیلا استفاده می‌کنند. برای ارتباط با سایر برنامه‌نویس‌ها هم چند میلینگ لیست دارند. اگر از عالم گیت‌هاب آمده باشید که کارتون ساخته است، چون خبری از پول ریکوئست و &lt;em&gt;Continuious Integration&lt;/em&gt; نیست. با دستورات گیت باید یک پج بسازید و بعد پچ رو روی صفحه باگ ارسال کنید. بعدا فهمیدم که اصلا اون فیکس کردن باگ در مقابل مشکلاتی که از اینجا شروع می‌شه هیچه! خلاصه دیگران میان و پچ شما رو ریویو می‌کنند. مثلا اینکه فلان قواعد رو رعایت نکردی، برو بخون و پچ جدید ارسال کن. خلاصه اگر از مرحله ریویو رد بشی یک توسعه دهنده میاد و پچت رو در ریپازیتوری گیت پروژه اعمال می‌کنه.&lt;/p&gt;

&lt;p&gt;این روش توسعه در سال ۲۰۱۷ مشکلات جدی‌ای داره. اگر ده یا بیست سال پیش بود مشکلی نبود. ولی امروز این روش به نظر من یک روش ضد مشارکته. اول که خبری از Continious  Integration نیست. یعنی شما پچ رو آپلود می‌کنید ولی هیچ تست اتوماتیکی روی پچ شما اجرا نمی‌شه که مراجعه‌کنندگان بفهمند وضعیت در صورت اعمال این پچ چه خواهد بود. دیگر اینکه شما نمی‌تونید فورک کنید و پول ریکوئست بفرستید. فورک و ارسال پول‌ریکوئست که روش رایج روی گیتهابه تازه‌واردان رو خیلی کمک می‌کنه و مشارکت رو ساده می‌کنه. &lt;/p&gt;

&lt;p&gt;ولی مشکل اصلی از نظر من اینه که پروژه‌ی پرکاربردی مثل GTK توسط شرکتی خصوصی اداره می‌شه. یعنی توسعه‌دهندگان اصلی اکثرا کارمندان شرکت‌های ردهت یا گوگل و زوزه هستند. بنابراین علاقه‌ی چندانی به حل مشکل یک کاربر مستقل نشون نمی‌دند مگر اینکه یکی از محصولات خودشون تحت تاثیر این باگ قرار بگیره. من چندین نوبت برای درخواست کمک به کانال چت پروژه مراجعه کردم. حدس زدم که بیشتر افرادی که دائما حاضرند همکارند و بخاطر اینکه مدتهاست روی پروژه کار می‌کنند نیازی به بهبود وبسایت و کمک به هکرهای مستقل ندارند، چون کار خودشون به شیوه فعلی راه می‌افته.&lt;/p&gt;

&lt;p&gt;نتیجه‌ای که از مشکلاتی که شرح دادم می‌خوام بگیرم اینه که برای پروژه‌های مستقل مهمه که همکاری کاربران تازه‌کار و هکرهای مستقل رو به خودش جذب کنه. برای اینکار باید مستندات و مثال‌های خوب و گام به گام در وبسایت و از همه مهمتر در خود مخزن گیت پروژه وجود داشته باشه. از پول ریکوئست بجای پچ استفاده بشه و با تست دائمی پچ یا پول‌ریکوئست تا جای امکان به ارسال کننده و دیگران فیدبک داد. در مجموع باید هزینه مشارکت رو به قدری کاهش داد که مقاومتی در ذهن مشارکت‌کننده ایجاد نشه. از طرفی باید یک کامیونیتی به newbie-friendly باشه. یک کامیونیتی باید کاربر تازه‌واردپسند باشه.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;یک کامیونیتی باید کاربر تازه‌واردپسند باشه.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;در نهایت هم اگر آشنایی با کد سی دارید و یا سرتون برای یک چالش درد می‌کنه برید و پچ من رو ریویو کنید که اگر درست بشه هزاران و شاید میلیون‌ها نفر ازش بهره مند می‌شوند. در ادامه نحوه دریافت و تست پچ رو به اختصار توضیح می‌دم. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://git.gnome.org/gtk+
cd gtk+
wget https://bug136059.bugzilla-attachments.gnome.org/attachment.cgi\?id\=343512 -O fix.patch
git apply fix.patch
./autogen
make -j4
cd demos/gtk-demo
./gtk4-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;از سایدبار برنامه‌ی دمو باکس متنی Hypertext رو پیدا کنید و داخلش فارسی بنویسید و با gedit روی دستگاه خودتون مقایسه کنید. اگر از نتیجه راضی بودید در صفحه باگ کامنت بذارید که خدا رو خوش بیاد!&lt;/p&gt;</description>
          <pubDate>2017-01-29 07:30:28</pubDate>
          <link>/mehdix/patch.html</link>
          <guid isPermaLink="true">/mehdix/patch.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>ماژول راست به چپ اوولوشن</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من برای بخشی از کارم از کلاینت ایمیل ‬‬&lt;a href=&quot;https://wiki.gnome.org/Apps/Evolution&quot;&gt;اوولوشن&lt;/a&gt; استفاده می‌کنم. برای راحتی فارسی‌نویسی برایش یک افزونه نوشتم.&lt;/p&gt;

&lt;p&gt;اول کمی مقدمه. اوولوشن کلاینت ایمیل پروژه‌ی گنوم(نوم) است. سابقه این برنامه به سال ۲۰۰۰ میلادی برمی‌گردد. برنامه به زبان C و رابط گرافیکی با Gtk نوشته شده است. امکانات برنامه هم علاوه بر ارسال و دریافت ایمیل شامل بخش‌های تقویم، دفترچه تلفن، کارها و یادداشت‌هاست. کل برنامه در یک پنجره باز می‌شود به جز پنجره ارسال ایمیل و خواندن ایمیل (فقط متن یک ایمیل در پنجره اصلی نمایش داده می‌شود). امکان خواندن و نوشتن ایمیل‌های رمزشده هم در برنامه به صورت توکار تعبیه شده است.&lt;/p&gt;

&lt;p&gt;و حالا شرح مشکل. با اینکه اوولوشن کلاینتی قدیمی است ولی هنوز کامپوزر (پنجره نوشتن ایمیل) فاقد امکان راست به چپ کردن ایمیله. یعنی در مود html کلید میانبر یا دگمه‌ای روی نوارابزار برنامه وجود ندارد که متن را راست به چپ بکند. هرچند ویجت پنجره نوشتن ایمیل این قابلیت را دارد چون از &lt;a href=&quot;https://webkit.org/project/&quot;&gt;WebKit&lt;/a&gt;‏ استفاده می‌کند.&lt;/p&gt;

&lt;p&gt;و راه حل. خوشبختانه اوولوشن یک مکانیزم دارد برای نوشتن افزونه. من با کمک این مکانیزم برایش یک افزونه نوشتم که دو تا دگمه به نوارابزار کامپوزر اضافه کند. ولی نحوه انجام این کار تقریبا پیچیده بود. چون ویجت وب‌کیت در یک پراسس مجزا کار خودش را انجام می‌دهد (از چون و چرایش اطلاع ندارم ولی احتمالا بخاطر امنیته) بنابراین باید از روش خاصی برای ارتباط با آن استفاده کرد. بعد از مقداری مطالعه مستندات و بازی با یک افزونه‌ی نمونه و طرح سوال روی کانال IRC برنامه بالاخره توانستم افزونه را سرهم کنم. ولی از شرحش در اینجا صرف نظر می‌کنم، فکر نمی‌کنم زیاد به کار کسی بیاید.&lt;/p&gt;

&lt;p&gt;افزونه را از گیت‌هاب می‌شود &lt;a href=&quot;https://github.com/mehdisadeghi/evolution-composer-rtl&quot;&gt;دریافت&lt;/a&gt; کرد. اگر اوولوشن روی دستگاه نصب است فقط کافیست برنامه را نصب کنید:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/mehdisadeghi/evolution-composer-rtl
$ cd evolution-composer-rtl
$ mkdir src/build
$ cd src/build
$ cmake ..
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ناگفته پیداست که باید cmake روی دستگاه نصب شده باشد.&lt;/p&gt;

&lt;p&gt;اما نتیجه‌گیری. توسعه‌ی این برنامه کار سختیه و اصلا کاربرپسند نیست. یعنی هزینه‌ی ورود و شروع بالاست. پیچیدگی برنامه هم زیاده. برای ایجاد یک تغییر کوچک باید کلی مستندات خواند بعد هم سوال پرسید و بعد هم با یک سورس کد پیچیده سر و کله زد و از همه اینها بدتر اینه که روال توسعه‌ی برنامه مبتنی بر ساخت و ارسال پچه. هیچ اشکالی به این کار وارد نیست ولی سرعت شروع را کند می‌کند و کسی حتی اگر بلد باشد یک فیچر را پیاده کند یا باگی را فیکس کند بخاطر این پیچیدگی‌ها از خیرش خواهد گذشت. در ضمن توسعه پروژه روی جایی مثل گیت‌هاب سرعت همکاری و جذب توسعه‌دهنده را زیاد می‌کند.&lt;/p&gt;</description>
          <pubDate>2017-01-01 07:30:28</pubDate>
          <link>/mehdix/evolution-composer-rtl.html</link>
          <guid isPermaLink="true">/mehdix/evolution-composer-rtl.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>کامپیوتر نه دلاری</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;بیش از هجده سال پیش برای اولین بار صاحب یک کامپیوتر شدم. سیصد مگاهرتز سی‌پی‌یو، شانزده مگابایت رم، چهار گیگ هارد و بدون شبکه و مودم با مانیتور سی‌آر‌تی و یک کیس بزرگ با لوازم جانبی. به تازگی کامپیوتری خریدم به قیمت نه دلار که کوچکتر از کف دست یک مرد بزرگسال است. در این نوشته آنها را با هم مقایسه می‌کنم.&lt;/p&gt;

&lt;p&gt;{: .center}
&lt;img src=&quot;assets/pimg/640px-Intel_Celeron_300A_MHz.jpg&quot; alt=&quot;&amp;quot;&amp;quot;&quot; title=&quot;سلرون ۳۰۰ - عکس از ویکی‌پدیا&quot; /&gt;&lt;/p&gt;

&lt;p&gt;همیشه دوست داشتم یک سرور خانگی راه‌اندازی کنم. اما در گذشته گزینه ارزان قیمتی برای اینکارها وجود نداشت. اصلا چیز مناسبی برای مصرف کننده‌ها در بازار نبود. باید یک کامپیوتر حجیم را جایی روشن می‌گذاشتی که بشود به اصطلاح سرور. تازه باید تجهیزات شبکه گران‌قیمت هم تهیه می‌کردی. البته همینکار را هم کردم. آن کامپیوتری که اول نام بردم برای مدتها در دوران دانشجویی نقش سرور اشتراک اینترنت، فایل سرور، چت سرور و غیره را برعهده اشت. البته یک روتر قدرتمند WRT54G و یک کارت شبکه کابلی بهش اضافه کرده بودم. با این وجود مصرف برق و حجم زیاد و سر و صدا و آسیب‌پذیری در برابر قطع برق و گرد و خاک همواره وجود داشت. به طور کلی همه قطعات خیلی آسیب‌پذیر بودند. برخی سی‌پی‌یو‌ها در صورت داغی و گرد گرفتگی فن یا از کار می‌افتادند یا می‌سوختند، هاددیسک‌ها زودتر خراب می‌شدند، پاور دستگاه بر اثر گردگرفتگی و نوسانات برق براحتی خراب می‌شد و قطعات مکانیکی هم که اول صف خرابی بودند.&lt;/p&gt;

&lt;p&gt;بنابراین آن کامپیوترهای حجیم و آسیب‌پذیر خانگی گزینه‌ی مناسبی برای تبدیل به سروری نبودند که باید همواره روشن باشد. پس جستجوی من همیشه برای پیدا کردن کامپیوترهای کوچک ادامه داشت. در طی این مدت هم تکنولوژی پیشرفت می‌کرد و روز به روز کامپیوترها سریع‌تر و ارزان‌تر و بهتر می‌شدند. تا اینکه طی سالهای گذشته با بوجود آمدن پدیده &lt;strong&gt;Crowd Funding&lt;/strong&gt; شاهد ظهور گروه‌های کوچکی شدیم که با رقبای بزرگ تولید کننده کامپیوتر به رقابت پرداختند. البته بیشتر از رقابت کردن بهتر است بگوییم که خلائی را پر کردند که شرکت‌های سنتی و بزرگ تولید کننده کامپیوتر علاقه‌ای به آن نداشتند. یعنی برای آنها انگیزه مالی کافی وجود نداشت که بیایند و برای دل ما کامپیوترهای کوچک تولید کنند!‌ :)&lt;/p&gt;

&lt;p&gt;در این میان «اینترنت چیزها» یا همان &lt;strong&gt;Internet of Things - IoT&lt;/strong&gt; هم متولد شد. یعنی کامپیوترها دیگر ناپیدا شدند و درون هر قطعه‌ای نفوذ کردند. درون تلویزیون‌ها، دوربین‌های مداربسته، سنسورها، میکروفن‌ها، کارت‌های اعتباری، کلید‌ها، لامپ‌ها و مانند اینها. به این لیست هرچه تصور می‌کنید هم اضافه کنید باز تمام نمی‌شود. در گذشته نیاز بود برای هر یک از این‌ها یک کامپیوتر یا پردازنده خاص تولید بشود. اما امروزه کامپیوترهای همه منظوره و &lt;strong&gt;Sysstem on Chip - SoC&lt;/strong&gt;ها یا همان &lt;strong&gt;سیستم روی تراشه&lt;/strong&gt; بقدری کوچک شده‌اند که مقرون به صرفه‌تر که از همین‌ها استفاده کرد. SoCها بجای یک سی‌پی‌یو در حقیقت یک کامپیوتر با معماری &lt;em&gt;فون نویمان&lt;/em&gt; را روی تراشه ساختند، با سایر تراشه‌هایی که سابقا جداگانه نصب می‌شدند یا روی مادربورد قرار داشتند، مثل تراشه بلوتوث و وایفای و پشتیبانی از دیسک‌های بزرگ و درگاه‌های سریع مثل USB.&lt;/p&gt;

&lt;p&gt;در حوزه مصرف انرژی این قطعات هم انقلابی به پا شد. بلوتوث پدید آمد و روز به روز کم مصرف‌تر و بهتر شد. آخرین نسخه آن که به بلوتوث ۴.۱ مشهور است می‌تواند همواره با چندین قطعه در تماس باشد بدون اینکه انرژی زیادی مصرف کند. در ضمن محققان پا را از این هم فراتر گذاشتند و قطعاتی طراحی کردند که انرژی مورد نیازش را از القای الکترومغناطیسی می‌گیرد و هروقت انرژی کافی ذخیره کرده باشد مدارش را اجرا می‌کند. (این مطلب را با مثال‌هایی که پیدا کنم به روز خواهم کرد). &lt;/p&gt;

&lt;p&gt;معماری سی‌پی‌یوها هم متحول شد. با ورود ARM صنعت تولید تراشه به سوی کامپیوترهای جیبی نشانه رفت. جایی که مدت‌ها بود اینتل از آن غفلت کرده بود. انقلاب واقعی اینجا اتفاق افتاد، در اسمارت‌فون‌ها. اسمارت‌فون‌ها سریع‌ترین رشد تکنولوژی را در تاریخ فناوری پشت سر گذاشته‌اند. به سرعت تمام همه چیز به سمت کوچک‌تر شدن و کم مصرف‌تر شدن حرکت کرد. نتیجه آن هم امروز در جیب هر کدام از ما پیدا می‌شود. یک کامپیوتر قدرتمند، با مصرف انرژی کم،‌ بدون هیچ‌گونه صدا و قطعه مکانیکی و مجهز به انواع سنسورهای محیطی، چی‌پی‌اس، بلوتوث و وایفای. وارد مقوله دوربین هم اصلا نمی‌شوم. باورکردنی نیست.&lt;/p&gt;

&lt;p&gt;{: .center}
&lt;img src=&quot;assets/pimg/chipAllSidesView.png&quot; alt=&quot;&amp;quot;&amp;quot;&quot; title=&quot;کامپیوتر نه دلاری چیپ - عکس از چیپ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;اگر نام &lt;a href=&quot;https://fa.wikipedia.org/wiki/%D9%82%D8%A7%D9%86%D9%88%D9%86_%D9%85%D9%88%D8%B1&quot;&gt;قانون مور&lt;/a&gt; به گوشتان خورده باشد، طبق آن هر دو سال تعداد ترانزیستورهای موجود روی واحد سطح تراشه‌ها دو برابر می‌شود. پیتر هینتجنز هم که قبلا راجع به او &lt;a href=&quot;peter-hintjens-chose-euthanasia&quot;&gt;نوشته‌ام&lt;/a&gt; قانون مشابهی دارد که در کتابش بنام &lt;a href=&quot;https://www.gitbook.com/book/hintjens/culture-empire/details&quot;&gt;ُCulture and Empire&lt;/a&gt; شرح داده است. اون این قانون را &lt;em&gt;Cost Gravity&lt;/em&gt; می‌نامد، یعنی «گرانش هزینه‌ها». به این معنی که هر دو سال یکبار قیمت تمام‌شده‌ی محصولات الکترونیکی نصف می‌شود. مثلا دو سال دیگر می‌شود هاردیسکی دو برابر حجیم‌تر و بهتر از نسخه فعلی کامپیوترمان را به قیمت فعلی خرید. همینطور برای رم و سایر قطعات. اگر گرانش هزینه‌ها نبود، کامپیوتری سلرون قدیمی من باید همراه با نرخ تورم هر روز گرانتر می‌شد و امروزه میلیون‌ها تومان قیمت داشت. ولی برعکس، من بتازگی کامپیوتر کوچکی خریده‌ام بنام «چیپ» با مشخصات زیر:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;سی‌پی‌یو ۱ Ghz&lt;/li&gt;
&lt;li&gt;۵۱۲ مگابایت رم&lt;/li&gt;
&lt;li&gt;بلوتوث ۴.۰&lt;/li&gt;
&lt;li&gt;۴ گیگابایت دیسک پرسرعت&lt;/li&gt;
&lt;li&gt;وایفای ب/جیم/نون&lt;/li&gt;
&lt;li&gt;یواس‌بی ۲.۰&lt;/li&gt;
&lt;li&gt;خروجی ویدیو TRRS و HDMI&lt;/li&gt;
&lt;li&gt;پین‌های ورودی/خروجی جهت اتصال سایر بوردها&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;امکانات بورد از این هم بیشتر است که در ‏&lt;a href=&quot;https://github.com/NextThingCo/CHIP-Hardware&quot;&gt;مستندات آنها&lt;/a&gt; قابل دسترسی است. روی فلش مموری هم یک نسخه سفارشی شده دبیان از پیش نصب شده است.&lt;/p&gt;

&lt;p&gt;همه این‌ها فقط ۹ دلار قیمت دارد. یعنی ۳۰ هزار تومان.&lt;/p&gt;

&lt;p&gt;{: .center}
&lt;img src=&quot;assets/pimg/chip.jpg&quot; alt=&quot;&amp;quot;&amp;quot;&quot; title=&quot;کامپیوتر نه دلاری - عکس از خودم&quot; /&gt;&lt;/p&gt;

&lt;p&gt;برق این کامپیوتر از یک کابل مینی‌یو‌اس‌بی تامین می‌شود که امروزه همه جا یافت می‌شود. من چیپ را بدون مانیتور راه اندازی کردم. به کمک &lt;em&gt;GNU Screen&lt;/em&gt;. طرز کار در &lt;a href=&quot;http://docs.getchip.com/chip.html#headless-chip&quot;&gt;مستندات چیپ&lt;/a&gt; شرح داده شده. به طور خلاصه چیپ با اتصال به یک پورت یو‌اس‌بی کامپیوتر روشن می‌شود و به عنوان یک قطعه‌ی سریال خودش را به کرنل معرفی می‌کند. اسکرین هم می‌تواند به آن وصل شود و به شما یک ترمینال بدهد که بقیه‌ی کارها مثل تنظیم اولیه‌ی وایفای را آنجا انجام می‌دهید.&lt;/p&gt;

&lt;p&gt;من موقع خرید دو تا چیپ سفارش دادم. چهار تای دیگر هم دارم سفارش می‌دهم. سیزده چهارده سال پیش که همراه دوستم قدیمی‌ام علی صادقی یک مودم اکسترنال را شریکی به قیمت ۵۴ هزار تومان خریدیم (چون هیچ کدام پول کاملش را نداشتیم) فکر نمی‌کردم که زمانی بجای یک کامپیوتر چند تا باهم سفارش بدهم.&lt;/p&gt;

&lt;p&gt;شاید اولین گروهی که کامپیوتری اینچنینی به تعداد انبوه تولید و روانه بازار کرد &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;رازبری‌پای&lt;/a&gt; بود. آنها نه تنها یک کامپیوتر ۲۵ دلاری ساختند بلکه یک کامیونیتی حول آن ایجاد کردند. پروژه‌های تکمیلی زیادی هم حول رازبری‌پای ایجاد شد. شاید مهمترین گروه مخاطب پروژه‌های اینچنینی کودکان و نوجوانان هستند که می‌توانند با بکارگیری این کامپیوترهای ارزان و قابل توسعه (توسط سنسورها و دوربین) کارهای خلاقانه انجام بدهند. &lt;/p&gt;

&lt;p&gt;اما این تازه شروع کار است. برای دیدن لیستی از کامپیوترهای کوچک مشابه این &lt;a href=&quot;http://www.bigboardlist.com/&quot;&gt;لیست&lt;/a&gt; را ببینید. برای دیدن لیستی از سخت‌افزارهایی که توسط مردم پشتیبانی مالی می‌شوند &lt;a href=&quot;https://www.crowdsupply.com/&quot;&gt;وبسایت کراود ساپلای&lt;/a&gt; را ببینید.&lt;/p&gt;

&lt;p&gt;تکنولوژی به طور عام و کامپیوتر به طور خاص در دسترس‌تر از همیشه است. برای من مهمترین پیامد این تغییر متحول شدن جامعه است. ارزان شدن کامپیوترهای چند منظوره گردش اطلاعات و ایجاد پروژه‌های خلاقانه را بیش از پیش تسهیل خواهد کرد. بویژه جوامعی که از نظر دسترسی به زیرساخت‌های آموزشی لازم فقیر هستند از این تغییر بیشتر سود را خواهند برد. چون حالا برای خلاقیت و پیاده کردن ایده‌هایشان ابزاری ارزان قیمت در اختیار دارند. هر کودک یک خانواده فقیر هم احتمالا می‌تواند یک کامپیوتر سی هزار تومانی بخرد و برنامه بنویسد و پروژه‌ای بسازد.&lt;/p&gt;

&lt;p&gt;من با اشتیاق این موضوع را دنبال می‌کنم.&lt;/p&gt;</description>
          <pubDate>2016-12-17 07:30:28</pubDate>
          <link>/mehdix/chip-mini-computer.html</link>
          <guid isPermaLink="true">/mehdix/chip-mini-computer.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>مکتوب</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من وقت زیادی در روز به خواندن مقالات اینترنتی اختصاص می‌دهم و بخش مهمی از معلوماتم را از این روش کسب می‌کنم. برای ساده‌تر شدن خواندن صفحات در کرومیوم یک افزونه نوشتم.&lt;/p&gt;

&lt;p&gt;قبلا در مطلب &lt;a href=&quot;distraction-free-reading&quot;&gt;امکان مطالعه بی مزاحمت در فایرفاکس&lt;/a&gt; قابلیت خواندن بدون مزاحمت در فایرفاکس را معرفی کرده بودم. موزیلا کد این قابلیت را در یک لایبرری جاوااسکریپت بنام &lt;a href=&quot;https://github.com/mozilla/readability&quot;&gt;Readability.js&lt;/a&gt; منتشر کرده است. از جایی که من بیشتر از کرومیوم استفاده می‌کنم و این قابلیت در آنجا فراهم نبود من یک افزونه کروم بنام «مکتوب» با استفاده از این لایبرری نوشتم. مکتوب را می‌توان از ‬فروشگاه آنلاین گوگل روی کرومیوم یا کروم ‎‬&lt;a href=&quot;https://chrome.google.com/webstore/detail/maktoob/oahgddeaidcccjknakhbamebomknkdfo&quot;&gt;نصب&lt;/a&gt; کرد. کدش هم روی &lt;a href=&quot;https://github.com/mehdisadeghi/maktoob&quot;&gt;گیت‌هاب&lt;/a&gt; قرار دارد.&lt;/p&gt;

&lt;p&gt;طرز کار با آن هم بسیار ساده است. فقط کافیست روی آیکون آن در نوارابزار کروم کلیک کنید. محتویات صفحه با یک نسخه متنی جایگزین خواهد شد.&lt;/p&gt;

&lt;p&gt;ممکن است مکتوب در نمایش بعضی از صفحات مشکل داشته باشد. ممکن است جهت صفحات فارسی درست تشخیص داده نشود و یا اصلا متن را پیدا نکند. اگر این مشکلات در فایرفاکس هم هست می‌توانید آن را روی گیت‌هاب موزیلا گزارش کنید. مثلا مشکل تشخیص راست به چپ بودن صفحات را من قبلا &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1173548&quot;&gt;گزارش&lt;/a&gt; کرده ام که ظاهرا رفع شده است. استفاده از تگ &lt;code&gt;article&lt;/code&gt; و سایر تگ‌های جدید html کمک زیادی به نمایش صحیح مطالب می‌کند. چون برنامه می‌تواند با خواندن تگ‌ها بفهمد که متن اصلی کجاست، عنوانش چیست و مانند اینها.&lt;/p&gt;

&lt;p&gt;نام «مکتوب» را از دوستم علی آیت‌اللهی الهام گرفته‌ام. برای اطلاعات بیشتر به ‏‎&lt;a href=&quot;projects/maktoob&quot;&gt;صفحه پروژه&lt;/a&gt; مراجعه کنید.&lt;/p&gt;</description>
          <pubDate>2016-12-10 07:30:28</pubDate>
          <link>/mehdix/maktoob-chrome-extension.html</link>
          <guid isPermaLink="true">/mehdix/maktoob-chrome-extension.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>پیتر هینتجنز اُتانازی را انتخاب کرد</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;در چهارمین روز اکتبر سال ۲۰۱۶ مصادف با سیزدهم مهرماه سال ۱۳۹۵ آقای &lt;a href=&quot;http://hintjens.com/&quot;&gt;پیتر هینتجنز&lt;/a&gt; نویسنده‌ و برنامه‌نویس پرکار و ایده‌پرداز اصلی پروژه‌ی &lt;a href=&quot;http://zeromq.org/&quot;&gt;0MQ&lt;/a&gt; و رل مدل مورد علاقه من، در پنجاه و سه سالگی با انتخاب &lt;a href=&quot;https://fa.wikipedia.org/wiki/%D8%A7%D8%AA%D8%A7%D9%86%D8%A7%D8%B2%DB%8C&quot;&gt;اتانازی&lt;/a&gt; به زندگی خود خاتمه داد.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I&amp;#39;m choosing euthanasia etd 1pm.&lt;br&gt;&lt;br&gt;I have no last words.&lt;/p&gt;&amp;mdash; Pieter Hintjens (@hintjens) &lt;a href=&quot;https://twitter.com/hintjens/status/783254242052206592&quot;&gt;October 4, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;اتانازی به معنای مرگ انتخابی است. پیتر روز ۱۸ آوریل همین سال ‏&lt;a href=&quot;https://twitter.com/hintjens/status/722074401798287361&quot;&gt;مطلع شده بود&lt;/a&gt; که به سرطان روده کشنده مبتلاست و چند هفته تا چندماه بیشتر زنده نخواهد بود. او پنج سال پیش یکبار با جراحی از مرگ نجات پیدا کرده بود ولی اینبار سلول‌های سرطانی باقی مانده وارد مرحله متااستاز شده بودند. یعنی از محل اولیه خارج و در نقاط مختلف بدن تکثیر شده بودند و امید بهبود را از میان برده بودند. هرچند او به شیمی درمانی هم تن داد ولی به قول خودش به عنوان تشکر از پزشکانی که به او پنج سال عمر اضافه هدیه کرده بودند بدنش را در اختیار آنها گذاشت تا داروهای جدید را روی او آزمایش کنند و داده جمع‌آوری کنند.&lt;/p&gt;

&lt;p&gt;پیش از آنکه راجع به اتانازی سوال کنید به &lt;a href=&quot;http://hintjens.com/blog:115&quot;&gt;مقاله‌ی مشهور او&lt;/a&gt; (A Protocol for Dying) در این مورد مراجعه کنید. او با اطلاع از سرنوشتی که در انتظارش بود، به روال همیشه، برای مردن هم یک پروتکل نوشت. این پروتکل در مورد نحوه‌ی برخورد با کسانی است که مرگ آنها حتمی است.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;او با اطلاع از سرنوشتی که در انتظارش بود، به روال همیشه، برای مردن هم یک پروتکل نوشت.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;اما چرا او رل مدل مورد علاقه من است؟ به دلایل مختلف. بگذارید اول شرح دهم چطور با او آشنا شدم. من برای اولین بار هنگامی که مشغول نوشتن تزم بودم در جستجوی یک لایبرری که به من، به شیوه‌ای ساده و سریع و پرقدرت، امکان پیاده‌سازی برنامه‌های توزیع یافته را بدهد با &lt;a href=&quot;http://zeromq.org/&quot;&gt;0MQ&lt;/a&gt; آشنا شدم. 0MQ یک لایبرری به زبان C است. با کمک آن می‌توان برنامه‌های تحت شبکه نوشت بدون آنکه درگیر پیچیدگی‌های معمول این نوع برنامه‌نویسی شد. مثلا به سادگی می‌توان یک برنامه‌ی P2P یا Publish Subscriber یا Client-Server نوشت. یک گنج واقعی است. به زبانهای مختلف هم Wrapper دارد. من برنامه‌ام را با پایتون نوشته بودم. &lt;/p&gt;

&lt;p&gt;برای یادگیری API و طرز کار و فلسفه‌ی 0MQ شروع به خواندن &lt;a href=&quot;http://zguide.zeromq.org/page:all&quot;&gt;ZeroMQ Guide&lt;/a&gt; کردم. به سرعت دریافتم که این یک راهنمای معمولی نیست. با خواندن همان پاراگراف‌های اول پرواضح بود که نویسنده فرد خاص و بسیار با استعدادی است. مقاله‌ی جامع و سرشار از نکات ظریف و نیز زبان طنز خاص او باعث شد علاقه‌مند شوم تا او را بشناسم. پس خواندن را شروع کردم. خواندن آن راهنما را به شدت توصیه می‌کنم.&lt;/p&gt;

&lt;p&gt;نکته‌ی مهمی که اینجا باید اضافه کنم فلسفه وجودی 0MQ است. چیزی که با خواندن مقالات و کتابهای او فهمیدم. کارهای بزرگ و اثرگذار معمولا هدف و یک فلسفه و یک هویت خاصی در هسته خودشان دارند. یعنی برای چیزی به وجود آمده‌اند. چیزی که بودن آنها را معنی می‌کند و مسیر تکامل آنها را روشن می‌کند. در مورد 0MQ هدف توانمندسازی انسانها برای نوشتن برنامه‌هایی است که شکست‌ناپذیرند. یعنی هیچ قدرتی نتواند آنها را از بین ببرد و بر آدم‌ها مسلط شود. از طریق ارائه‌ی یک ابزار قوی که به هم پیوستن و همکاری انسانها را تقویت بکند. اجازه دهد که آدم‌ها با سرعت و امنیت و راحتی به هم متصل شوند و ایده‌های خلاقانه خودشان را با یکدیگر اجرا کنند. این فلسفه من را جذب کرد.&lt;/p&gt;

&lt;p&gt;از 0MQ که بگذریم او یک نویسنده‌ی قهّار بود. کافیست به کتابها و مقالات و RFCهایش مراجعه کنید. کتابهایش به رایگان در سایتش قابل دانلود هستند. اما اگر امکانش برای شما مهیاست کتابهایش را بخرید، هرچند او درگذشته است ولی عواید فروش به دو کودک خردسالش می‌رسد. به گفته خودش از زمانی که پنج سال پیش عمر دوباره‌ای به دست آورد تلاش‌هایش را چند برابر کرد. پی در پی می‌نوشت. همه‌ی کتابهایش در این دوره منتشر شده‌اند. من فکر می‌کنم نوشتن عالی‌ترین تجلی مبارزه‌ی ما با نیستی است. وقتی می‌نویسیم هستیم. بیراه نیست که او هیچ کلام آخری نداشت، همه را پیش از آن نوشته است.&lt;/p&gt;

&lt;p&gt;یکی از نوشته‌های تاثیرگذار او پروتکل &lt;a href=&quot;https://rfc.zeromq.org/spec:22/C4/&quot;&gt;C4&lt;/a&gt; یا همان Collective Code Construction Contract است. در این پروتکل یک پیشنهاد جهت همکاری در راستای ساختن پروژه‌های نرم‌افزار آزاد است. اینکه چطور با هم به بهترین شیوه همکاری کنیم. دانش اجتماعی او در ایجاد این پروتکل نقل مهمی داشته. مثلا کافیست اشاره کنم که در این پروتکل هر پول ریکوئست (Pull Request) بلافاصله مرج (Merge) می‌شود. حتما تعجب کردید. بله بلافاصله. حتی اگر باعث خرابی پروژه بشود. اما مگر می‌شود؟ بله می‌شود. همانطور که ویکی‌پدیا هم با وجود اینکه همه ی‌توانند آنرا ویرایش کنند، برخلاف باور اولیه‌ی خیلی‌ها، کار کرد و کار می‌کند و پیش می‌رود. در این پروتکل تاکید نه روی کد بلکه روی انسانهاست. یکی از جمله‌های او که در ذهنم حک شده است اینست: «نرم‌افزار در مورد کد نیست، بلکه در مورد آدم‌هاست».&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;نرم‌افزار در مورد کد نیست، بلکه در مورد آدم‌هاست.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;یکی از ویژگی‌های مهم پیتر توانایی او در ساختن کامیونیتی‌های آنلاین است، که او آنها را «سیستم‌های زنده» می‌نامد. در این باره از او ویدیوهای زیادی در اینترنت باقی مانده است. ولی از همه مهمتر اینکه اون دانش خود را در &lt;a href=&quot;https://www.amazon.com/dp/B01F8I7Z7E&quot;&gt;کتابی&lt;/a&gt; بنام &lt;a href=&quot;https://www.gitbook.com/book/hintjens/social-architecture/details&quot;&gt;Social Architecture&lt;/a&gt; مستند کرده است.&lt;/p&gt;

&lt;p&gt;در همین راستا کتاب دیگری دارد بنام &lt;a href=&quot;https://www.gitbook.com/book/hintjens/psychopathcode/details&quot;&gt;The Psychopath Code&lt;/a&gt;. در این کتاب فقط از رفتار گروهی آدم‌ها و Psychopath‌ها حرف می‌زند. یاد می‌دهد چطور آنها را ببینیم و بشناسیم. کتاب جالبی است. می‌گوید از هر بیست و پنج نفر یکی Psychopath است. بعد از خواندن این کتاب ناخودآگاه آدم‌هایی با آن مشخصات را در اطراف خودتان مشاهده می‌کنید.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hintjens.com/books&quot;&gt;کتابهای دیگرش&lt;/a&gt; را می‌توانید در وبسایتش ببینید دانلود کنید یا بخرید. همچنین لیست ویدیوها و پادکست‌هایش هم در وبسایتش وجود دارد. من برای مدتی طولانی مشغول خواندن مقالاتش خواهم بود. راستی به &lt;a href=&quot;https://github.com/hintjens&quot;&gt;اکانت گیت‌هابش&lt;/a&gt; هم سر بزنید تا ببینید که حتی از روی تخت بیمارستان هم به مرج کردن پی‌آرها ادامه داده و به حجم فعالیت‌هایش پی ببرید.&lt;/p&gt;

&lt;p&gt;هرچند از زمانی که به وجود او پی بردم تا زمان مرگ او دو سال بیشتر طول نکشید ولی نه تنها از این بابت بسیار شکرگزارم، بلکه باید اعتراف کنم او جزو افرادی است که به نوعی روح من را با نوشته‌هایشان لمس کردند و اثر ماندگاری روی طرز فکر و نگاه من به بسیاری از مسایل باقی گذاشتند.&lt;/p&gt;

&lt;p&gt;پیتر، به خاطر همه‌ی چیزهایی که به من آموختی واقعا متشکرم.&lt;/p&gt;</description>
          <pubDate>2016-10-06 07:30:28</pubDate>
          <link>/mehdix/peter-hintjens-chose-euthanasia.html</link>
          <guid isPermaLink="true">/mehdix/peter-hintjens-chose-euthanasia.html</guid>				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>قانون اساسی به فرم YAML</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;قانون اساسی مهمترین قانون هر کشوری است. ولی گیگ‌ها نیاز دارند که این قانون را با برنامه‌هایشان پردازش کنند. من هم قانون اساسی جمهوری اسلامی ایران را برای خاطر گیک‌ها به فرمت &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; تبدیل کردم.&lt;/p&gt;

&lt;p&gt;نهادهایی که با سرمایه ملت اداره می‌شوند وظیفه‌شان است که داده‌هایی که به مردم تعلق دارد را منتشر کنند. در دنیای امروز این داده‌ها باید برای برنامه‌ها قابل خواندن باشد. هرچند نهادهای اداره کننده کشور ما راه درازی پیش رو دارند تا اینکه روزی بتوانند این نیاز را مطابق انتظار یک گیک برآورنده کنند. به همین خاطر من دست به کار شدم و قانون اساسی را از &lt;a href=&quot;http://rc.majlis.ir/fa/content/iran_constitution&quot;&gt;سایت مرکز پژوهش‌های مجلس&lt;/a&gt; پیاده کرده و آن را به فرمت YAML نشانه‌گذاری کرده و &lt;a href=&quot;https://github.com/mehdisadeghi/iranconstitution/blob/master/constitution.yaml&quot;&gt;روی گیت‌هاب&lt;/a&gt; منتشر کردم. استفاده از این فایل طبق مجوز &lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;CC 4.0&lt;/a&gt; آزاد است.&lt;/p&gt;

&lt;p&gt;وقتی داده‌های عمومی مانند قانون در قالب‌های استاندارد در دسترس باشند می‌توان برنامه‌هایی نوشت که به سادگی آنها را خوانده و پردازش کنند. مثلا می‌شود هر اصل قانون اساسی را پیدا کرد. بدون داشتن داده در یک فرمت استاندارد و تحت یک مجوز آزاد امکان این کار نیست. YAML هم یک زبان نشانه‌گذاری برای ذخیره و بازیابی داده‌های متنی است. زبان JSON زیر مجموعه آن محسوب می‌شود. مهمترین ویژگی YAML خوانایی بالای آن برای انسانهاست. بنابراین می‌توان با پایتون یا روبی یا نود فایل را خواند و آن را اصل به اصل جستجو کرد یا فهمید کدام اصل اصلاح شده است یا اینکه لغات کلیدی را نسبت به هر اصل و بخش مرتب کرد و یا موارد دیگری از این دست را انجام داد. از همه اینها گذشته به واسطه خوانا بودن فایل آن را می‌توان به سادگی در هر ویرایشگر متنی خواند و احیانا اصلاح کرد.&lt;/p&gt;

&lt;p&gt;حین انتقال متن خام از سایت مرکز پژوهش‌های مجلس متوجه نکات جالبی شدم. اول اینکه که حدس می‌زنم داده‌اند کسی متن را از روی یک متن چاپی تایپ کرده است چرا که غلط‌های مختلف تایپی در متن وجود داشت. دیگر اینکه اصلا خبری از نیم‌فاصله نبود.  تا جایی که می‌توانستم اصلاح کردم اگر ایرادی مشاهده کردید لطفا روی گیت‌هاب تصحیح کنید و پول ریکوئست بفرستید. در ضمن طرف خیلی هم خسته بوده است. گاهی جملاتی را دوبار تایپ کرده، گاهی هم قانون جدید و قدیم را یکی نوشته که گاها مجبور شدم با &lt;a href=&quot;http://www.shora-gc.ir/Portal/Home/ShowPage.aspx?Object=News&amp;amp;ID=346db5f5-6205-4ec0-a619-f6d7d57be193&amp;amp;LayoutID=df97d031-b451-4421-819a-5012d4705435&amp;amp;CategoryID=ff0668dd-649c-4d53-a9ba-23ec1caed3be&quot;&gt;سایت مجلس خبرگان&lt;/a&gt; کنترل کنم. (آنجا وضع تایپ بدتر بود، مثال از یای فارسی خبری نبود!) اما سخت‌ترین قسمت کار تصمیم‌گیری برای قالب فایل بود طوری که نه سیخ بسوزد نه کباب. یعنی هم فایل خوانایی خودش را حفظ کند و هم من بتوانم کارم را راحت‌تر انجام بدهم.&lt;/p&gt;

&lt;p&gt;ساختار کلی فایل به شرح زیر است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The Constitution:
  Introduction:
  Principles:
    - chapter:
      index:
      history:
        -
      text:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در فایل کلیدهای مختلفی بکار برده‌ام. اما مهمترین کلیدهای بکار رفته در فایل هم به شرح زیر هستند:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Constitution: همه قوانین زیر این مدخل نوشته شده‌اند، یعنی قانون اساسی&lt;/li&gt;
&lt;li&gt;Introduction: مقدمه‌ی قانون اساسی جمهوری اسلامی ایران&lt;/li&gt;
&lt;li&gt;Principles: اصول قانون اساسی. یک لیست است.&lt;/li&gt;
&lt;li&gt;chapter: شماره فصل. قانون اساسی در چهارده فصل تنظیم شده است.&lt;/li&gt;
&lt;li&gt;index: شماره اصل قانون&lt;/li&gt;
&lt;li&gt;history: نسخه‌های قبلی. در حال حاضر بعضی اصول فقط یک تاریخچه دارند که به اصلاحیه سال ۱۳۶۸ باز می‌گردد.&lt;/li&gt;
&lt;li&gt;text: متن هر اصل از قانون&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;برای خواندن فایل در پایتون می‌توانید از &lt;code&gt;pyyaml&lt;/code&gt; استفاده کنید:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pyyaml --user
$ git clone https://github.com/mehdisadeghi/iranconstitution
$ cd iranconstitution
$ python
&amp;gt;&amp;gt;&amp;gt; import yaml
&amp;gt;&amp;gt;&amp;gt; f = open('constitution.yaml')
&amp;gt;&amp;gt;&amp;gt; data = yaml.load(f, Loader=yaml.CLoader) # CLoader is super fast
&amp;gt;&amp;gt;&amp;gt; len(data['The Constitution']['Principles'])
177
&amp;gt;&amp;gt;&amp;gt; print(data['The Constitution']['Principles'][1]['text'])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;به روال گذشته این پروژه هم &lt;a href=&quot;projects/iranconstitution&quot;&gt;صفحه اختصاصی خودش&lt;/a&gt; را دارد. همچنین تشکر ویژه از ‏جادی بابت معرفی این پروژه در &lt;a href=&quot;http://jadi.net/2016/08/mondays-mordad-95/&quot;&gt;لینک‌های شاد آخر ماه مرداد&lt;/a&gt;.&lt;/p&gt;</description>
          <pubDate>2016-08-07 07:30:28</pubDate>
          <link>/mehdix/iran-constitution.html</link>
          <guid isPermaLink="true">/mehdix/iran-constitution.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>بوکمارکر</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من از تگ‌گذاری بوکمارک‌هایم برای جستجوی آنها استفاده می‌کنم. در فایرفاکس جستجو بر اساس تگ آسان است اما در کروم اینطور نیست. برای ساده‌تر کردن جستجوی بوکمارک‌هایم در کروم یک افزونه نوشتم.&lt;/p&gt;

&lt;h1&gt;مدیریت داده‌های فردی&lt;/h1&gt;

&lt;p&gt;وقتی داده‌هایی که ذخیره می‌کنیم افزایش پیدا می‌کند کم کم نیاز به راهی برای مدیریت داده‌ها اهمیت خودش را نشان می‌دهد. راه رایج درست کردن پوشه‌های مختلف و نامگذاری آنها بر حسب موضوع یا تاریخ و مانند اینهاست. هرچند اینکار برای داده‌ها مقدور است (اما فاقد متاداده است که بعدا به آن خواهم پرداخت) اما برای لینک‌ها اینطور نیست. خوشبختانه مرورگرها از گذشته امکان به خاطر سپردن لینک‌های گلچین شده را داشته‌اند ولی برای دسته‌بندی آنها معمولا هم به همان روش پوشه‌سازی متوسل شده‌اند. اما جستجوی آنها برای من همواره مشکل و ناکارآمد بود.&lt;/p&gt;

&lt;h1&gt;جستجوی کامل متنی&lt;/h1&gt;

&lt;p&gt;فایرفاکس و کروم هر دو امکان جستجوی کامل متنی را بر روی لینک‌های ذخیره شده فراهم می‌کنند. هر دو این مرورگرها موقع گلچین (بوکمارک) کردن یک لینک علاوه بر خود لینک، عنوان (title) سایت را هم ذخیره می‌کنند. موقع جستجو هر دوی این مقادیر جستجو می‌شود. فایرفاکس امکان این را دارد که هنگام ذخیره لینک صریحا تگ‌هایی به آن اختصاص بدهیم ولی کروم این امکان را ندارد. راه حلی که من پیدا کرده‌ام اینست که هنگام ذخیره لینک در کروم، عنوان سایت را ویرایش می‌کنم و تگ‌های مورد نظرم را به آن اضافه می‌کنم. این راهکار مشکل کمبود تگ‌گذاری در کروم را برای من حل کرده است.&lt;/p&gt;

&lt;h1&gt;کاستی جستجوی گلچین‌ها در کروم&lt;/h1&gt;

&lt;p&gt;کروم موقع جستجو در نوار آدرسش (omnibox) حداکثر ۶ نتیجه را پیشنهاد می‌کند. این مقدار هارد کد شده است. مشکل من این بود که الگوریتم جستجوی کروم لزوما به بوکمارک‌های من اولویت نمی‌داد و نتایجی هم از اینترنت در مقادیر پیشنهادی می‌گنجاند. بنابراین «بوکمارکر» را نوشتم که بتوانم به صورت اختصاصی فقط گلچین‌ها را جستجو کنم.&lt;/p&gt;

&lt;h1&gt;طرز کار بوکمارکر&lt;/h1&gt;

&lt;p&gt;در نوار آدرس &lt;code&gt;bb&lt;/code&gt; وارد می‌کنیم و بعد کلمات کلیدی دلخواهمان را تایپ می‌کنیم. بوکمارکر نتایج جستجو و تعداد آنها را در زیر نوارد آدرس نمایش می‌دهد.&lt;/p&gt;

&lt;p&gt;{: .center}
&lt;img src=&quot;assets/pimg/bookmarker.png&quot; alt=&quot;&amp;quot;Something went wrong.&amp;quot;&quot; title=&quot;بوکمارکر فقط گلچین‌ها را جستجو می کند.&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;صفحه اختصاصی پروژه&lt;/h1&gt;

&lt;p&gt;برای اطلاعات بیشتر به ‏‎&lt;a href=&quot;projects/bookmarker&quot;&gt;صفحه پروژه&lt;/a&gt; مراجعه کنید. افزونه را می‌توانید از ‏‏‬&lt;a href=&quot;https://chrome.google.com/webstore/detail/dogmmdcflcflabibfbecmfgaaobifimo&quot;&gt;اپ استور کروم‮‮&lt;/a&gt; نصب کنید.&lt;/p&gt;</description>
          <pubDate>2016-06-18 07:30:28</pubDate>
          <link>/mehdix/bookmarker.html</link>
          <guid isPermaLink="true">/mehdix/bookmarker.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>کارت هوشمند</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;به تازگی دو کلید سخت‌افزاری تهیه کردم، یکی توسط دوستی به من هدیه داده شده و یکی را هم خریدم. هر دو آنها از پروتکل U2F پشتیبانی می‌کنند ولی کلید Yubikey 4 قابلیت‌های بیشتری دارد از جمله قابلیت اسمارت‌کارت که در این مقاله به آن می‌پردازم. البته من متخصص امنیت نیستم و این مطلب صرفا جنبه کاربردی دارد.&lt;/p&gt;

&lt;h1&gt;چرا کلید سخت‌افزاری؟&lt;/h1&gt;

&lt;p&gt;در حالت عادی ما با بک کلمه عبور و پسورد به حساب کاربری‌مان دسترسی پیدا می‌کنیم. این روش حداقل امنیت را تامین می‌کند. اگر کسی پسورد ما را بدست بیاورد به حساب ما دسترسی پیدا می‌کند. بهترین روشی که در حال حاضر برای امن‌تر کردن دسترسی به حسابها بوجود آمده است «تصدیق‌یابی دو مرحله‌ای» است. در این روش بعد از وارد کردن پسورد اصلی کاربر باید یک پسورد یکبار مصرف نیز وارد کند. این پسورد می‌تواند از طریق یک برنامه تولید شود یا از طریق تلفن یا پیامک به شماره تلفن از پیش مشخص شده فرد ارسال بشود و یا اینکه توسط یک کلید سخت‌افزاری تولید بشود. معمولا از کاربر هر سی روز یکبار این پسورد دوم پرسیده می‌شود. نکته مهم در مورد پسورد‌های یکبار مصرف اینست که اگر کسی آنها را به دست بیاورد نمی‌تواند هیچ سوءاستفاده‌ای بکند چرا که پسورد باطل شده است.&lt;/p&gt;

&lt;p&gt;در صورتی که از کلید سخت‌افزاری برای اینکار استفاده شود، فقط کافیست که کلید در پورت USB وارد شده باشد. در مورد Yubikey 4 باید موقعی که مرورگر درخواست می‌کند، دگمه روی کلید لمس شود. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;کارت هوشمند ابزاری برای پشتبیان‌گیری از کلیدهای خصوصی نیست.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;کلید سخت‌افزاری برای افرادی که از کامپیوترهای مختلفی استفاده می‌کنند یا ممکن است همواره گوشی هوشمند به همراه نداشته باشند گزینه مناسبی است. در ضمن از تغییرات نرم‌افزار گوشی هوشمند هم تاثیر نمی‌پذیرد و کار با آن ساده است. از همه اینها مهمترین برای من قابلیت انتقال کلیدهای خصوصی در فرآیند رمزنگاری به کمک کلیدهای عمومی است. در این روش من کلیدهای خصوصی‌ام را روی کلیدسخت‌افزاری منتقل می‌کنم و برنامه GnuPg کلیدهای خصوصی را همواره از روی کلید می‌خواند و نه از روی دیسک. این قابلیت کلید آنرا تبدیل به یک اسمارت‌کارت یا «کارت هوشمند» می‌کند. نکته مهمی که اینجا وجود دارد اینست که بدانیم کلید سخت‌افزاری روشی برای پشتبیان‌گیری از کلیدهای خصوصی نیست، بلکه صرفا جهت راحت‌تر کردن دسترسی به کلیدها بکار می‌رود بدون اینکه آنها را در خطر بیاندازد. چرا که امکان دانلود کردن کلید خصوصی از Yubikey 4 وجود ندارد.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;امکان دانلود کردن کلید خصوصی از Yubikey 4 وجود ندارد.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;در تصویر زیر هر دو کلید قابل مشاهده هستند. یکی کوچکتر و شبیه سیم‌کارت و محصول شرکت &lt;a href=&quot;http://happlink.com/products.html&quot;&gt;Happlink&lt;/a&gt; است. قیمتش تقریبا پنج یورو است. دیگری مشکلی رنگ و بزرگتر است بنام &lt;a href=&quot;https://www.yubico.com/2015/11/4th-gen-yubikey-4/&quot;&gt;Yubikey 4&lt;/a&gt; و محصول شرکت Yubico که به گمانم معروف‌ترین شرکت تولید‌کننده کلید‌های سخت‌افزاری است. قیمت این یکی چهل یورو است.&lt;/p&gt;

&lt;p&gt;{:.center}
&lt;img src=&quot;assets/pimg/hardware-keys-2016-05-22-075322.jpg&quot; alt=&quot;image not found&quot; title=&quot;کلید‌های سخت‌افزاری Yubikey 4 و plug-up&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;چرا رمزنگاری با کلید عمومی؟&lt;/h1&gt;

&lt;p&gt;مدتهاست ایده‌ی اینکه ما ایمیل رمزنگاری شده به یکدیگر ارسال کنیم در عمل شکست خورده است. بنابراین اصلا چرا از رمزنگاری استفاده کنیم؟ پاسخ اینست که رمزنگاری عمومی برای اهداف مختلفی استفاده می‌شود من جمله امضای بسته‌های نرم‌افزاری. مثلا برای آپلود یک پکیج به یک مخزن ppa روی لانچ‌پد باید آنرا امضا کرد. همینطور برای آپلود یک پکیج به مخازن دبیان باید آنها را امضا کرد. چنانچه در کامیونیتی آنلاینی مثل آنچه در مورد دبیان وجود دارد نیز بخواهیم فعالیت کنیم باید کلید شناخته شده‌ای در  Web of Trust داشته باشیم. چرا که ما افراد را شخصا ملاقات نمی‌کنیم و تنها از طریق ایمیل و امضای دیجیتالی ما است که آنها به ما اعتماد می‌کنند. یا مثلا اگر از بیت‌کوین استفاده کنید باز هم باید با کلیدهایمان تراکنش‌ها را امضا کنیم و بدون دسترسی به کلید‌ها امکان دسترسی به منابع مالی وجود نخواهد داشت. &lt;/p&gt;

&lt;h1&gt;شناساندن کلید‌ها به لینوکس&lt;/h1&gt;

&lt;p&gt;قسمت اول افزودن udev rules های لازم برای شناساندن این کلید‌هاست. کافیست یک فایل جدید در مسیر &lt;code&gt;/etc/udev/rules.d/70-u2f.rules&lt;/code&gt; ایجاد کنیم و محتوای زیر را به آن اضافه کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# this udev file should be used with udev 188 and newer
ACTION!=&quot;add|change&quot;, GOTO=&quot;u2f_end&quot;

# Yubico YubiKey
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;1050&quot;, ATTRS{idProduct}==&quot;0113|0114|0115|0116|0120|0402|0403|0406|0407|0410&quot;, TAG+=&quot;uaccess&quot;

# Happlink (formerly Plug-Up) Security KEY
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;2581&quot;, ATTRS{idProduct}==&quot;f1d0&quot;, TAG+=&quot;uaccess&quot;

#  Neowave Keydo and Keydo AES
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;1e0d&quot;, ATTRS{idProduct}==&quot;f1d0|f1ae&quot;, TAG+=&quot;uaccess&quot;

# HyperSecu HyperFIDO
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;096e&quot;, ATTRS{idProduct}==&quot;0880&quot;, TAG+=&quot;uaccess&quot;

LABEL=&quot;u2f_end&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;بعد از ریستارت دامون udev یا با ریستارت سیستم این قوانین فعال می‌شوند. مرورگر گوگل کروم به صورت پیش‌فرض از این کلیدها پشتیبانی می‌کند و نیاز به کار خاصی نیست. فایرفاکس هم مشغول پیاده‌سازی این قابلیت است. حالا می‌توان در تنظیمات امنیتی گوگل و گیت‌ها و هر سایت دیگری که از U2F پشتیبانی می‌کند و جزو کنسرسیوم fido است، کلید‌سخت‌فازاری‌مان را رجیستر کنیم و از آن برای گام دوم لاگین استفاده کنیم.&lt;/p&gt;

&lt;h1&gt;تهیه پیشتیبان فیزیکی از کلیدها&lt;/h1&gt;

&lt;p&gt;از اینجا به بعد ما کاری با کلید Happlink یا همان plug-up نداریم. این کلید فقط برای تولید پسورد بدرد می‌خورد و قابلیت ذخیره کلید خصوصی ندارد. البته گویا نسخه جدیدش اینکار را انجام می‌دهد ولی من قدیمی‌اش را دارم. برای اینکار ما از Yubikey 4 استفاده می‌کنیم. اولین مرحله تهیه نسخه پشتبیان از کلید خصوصی‌مان است. اگر کلیدی ندارید باید با دستور gpg --gen-key  یکی بسازید.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --armor --export &amp;gt; pgp-public-keys.asc
gpg --armor --export-secret-keys &amp;gt; pgp-private-keys.asc
gpg --armor --gen-revoke [your key ID] &amp;gt; pgp-revocation.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;خروجی دستورات بالا را پرینت کنید و همچنین روی یک سی‌دی رایت کنید و در جای مطمئنی نگهداری کنید. در غیر اینصورت اگر این فایل‌ها از بین بروند و یا در صورتی که بعد از انتقال آنها به کلیدسخت‌‌افزاری، کلید گم یا خراب بشود، دیگر امکان دست‌یابی به محتوای وابسته به این کلید وجود نخواهد داشت. من خروجی دستورات بالا را به QR کد تبدیل و چاپ کردم که بازگردانی آن راحت‌تر باشد. راهنمای لازم را روی &lt;a href=&quot;https://github.com/4bitfocus/asc-key-to-qr-code&quot;&gt;گیت‌هاب&lt;/a&gt; پیدا می‌کنید.&lt;/p&gt;

&lt;h1&gt;OpenPGP Smartcard Support&lt;/h1&gt;

&lt;p&gt;برای فعال کردن قابلیت اسمارت‌کار برای اپن‌پی‌جی‌پی باید بسته‌های زیر را نصب و سرویس مربوطه را فعال کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pacman -S pcsc-tools, ccid, libusb-compat
$ sudo systemctl enable pcscd.serviceand
$ sudo systemctl start pcscd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر همه چیز درست انجام شود می‌توانیم وضعیت اسمارت‌کارتمان را چک کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Check card status
[mehdi@x250 ~]$ gpg --card-status
Reader ...........: Yubico Yubikey 4 OTP U2F CCID 00 00
Application ID ...: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: XXXXXXXX
Name of cardholder: [not set]
Language prefs ...: [not set]
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: [not set]
Signature PIN ....: not forced
Key attributes ...: rsa2048 rsa2048 rsa2048
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 0
Signature key ....: [none]
Encryption key....: [none]
Authentication key: [none]
General key info..: [none]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ابزار دیگری نیز برای اینکار هست بنام &lt;code&gt;pcsc_scan&lt;/code&gt;. حالا می‌توانیم کلیدها را روی کارت منتقل کنیم.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mehdi@x250 ~]$ gpg --edit-key mehdi@mehdix.ir
gpg (GnuPG) 2.1.12; Copyright (C) 2016 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

sec  rsa2048/2E292C9F
     created: 2016-05-16  expires: 2017-05-16  usage: SC  
     trust: ultimate      validity: ultimate
ssb  rsa2048/82B64022
     created: 2016-05-16  expires: 2017-05-16  usage: E   
[ultimate] (1). Mehdi Sadeghi &amp;lt;mehdi@mehdix.ir&amp;gt;

gpg&amp;gt;  key 1

sec  rsa2048/2E292C9F
     created: 2016-05-16  expires: 2017-05-16  usage: SC  
     trust: ultimate      validity: ultimate
ssb* rsa2048/82B64022
     created: 2016-05-16  expires: 2017-05-16  usage: E   
[ultimate] (1). Mehdi Sadeghi &amp;lt;mehdi@mehdix.ir&amp;gt;

gpg&amp;gt; keytocard

Please select where to store the key:
   (1) Signature key
Your selection? 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر هم چندین کلید داریم با تکرار دستور &lt;code&gt;keytocard&lt;/code&gt; می‌توانیم همه آنها را منتقل کنیم. با این دستور اول باید پسورد کلید خصوصی را وارد کنیم بعد هم پسورد ادمین کلید را. موقع خروج هم تنظیمات را ذخیره می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; quit
Save changes? (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;پسورد ادمین پیش‌فرض یوبی‌کی &lt;code&gt;12345678&lt;/code&gt; و پین پیش‌فرض آن &lt;code&gt;123456&lt;/code&gt; است. با روش زیر می‌توان تنظیمات اسمارت‌کارت را تغییر داد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mehdi@x250 ~]$ gpg --card-edit
gpg/card&amp;gt; help
quit           quit this menu
admin          show admin commands
help           show this help
list           list all available data
fetch          fetch the key specified in the card URL
passwd         menu to change or unblock the PIN
verify         verify the PIN and list all data
unblock        unblock the PIN using a Reset Code
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;نتیجه‌گیری&lt;/h1&gt;

&lt;p&gt;طی این مقاله ما کلیدهای خصوصی را از روی هارددیسک منتقل کردیم به یک کلید سخت‌افزاری. موقع استفاده از GnuPG برای امضای دیجیتال یا رمزنگاری یا رمزگشایی باید کلید به کامپیوتر متصل باشد. همچنین می‌توان با آپلود کلیدهای عمومی به اینترنت در هرکجا فقط با همراه داشتن کلید سخت‌افزاری به عملیات‌های مرتبط دسترسی پیدا کرد. &lt;/p&gt;

&lt;p&gt;اطلاعات بیشتر:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.yubico.com/PGP/Importing_keys.html&quot;&gt;Yubikey 4 PGP Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://malcolmsparks.com/posts/yubikey-gpg.html&quot;&gt;مشابه همین مقاله به انگلیسی&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
          <pubDate>2016-05-22 07:30:28</pubDate>
          <link>/mehdix/plug-up-yubikey-4-hardware-keys.html</link>
          <guid isPermaLink="true">/mehdix/plug-up-yubikey-4-hardware-keys.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>python -m this</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;کوان‌های ذن پایتون.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;استاد برنامه‌نویس بدین گونه به سخن درآمد: برنامه‌ای که خوب نوشته شده بهشت خودش است و برنامه‌ای که بد نوشته شده جهنم خودش است.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;تائوی برنامه‌نویسی، نوشته‌ جفری جیمز، ترجمه آیدین غریب‌نواز&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import this

The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;زیبا بهتر از زشت است.&lt;br&gt;
صریح بهتر از ضمنی است.&lt;br&gt;
ساده بهتر از پیچیده است.&lt;br&gt;
پیچیده بهتر از بغرنج است.&lt;br&gt;
مسطح بهتر از تو در تو است.&lt;br&gt;
تنک بهتر از متراکم است.&lt;br&gt;
خوانایی مهم است.&lt;br&gt;
موارد خاص آنقدر خاص نیستند که قانون را زیر پا گذاشت.&lt;br&gt;
هرچند کاربری خلوص را مغلوب می‌کند.&lt;br&gt;
خطاها هرگز نباید بی سر و صدا رد شوند.&lt;br&gt;
مگر اینکه صریحا مسکوت شده باشند.&lt;br&gt;
در وقت شک و تردید از حدس زدن پرهیز کن.&lt;br&gt;
باید تنها و تنها یک راه آشکار برای انجام آن وجود داشته باشد.&lt;br&gt;
هرچند ممکن است آن راه در ابتدا آشکار نباشد مگر آنکه هلندی باشی!&lt;br&gt;
اکنون بهتر از هرگز است.&lt;br&gt;
هرچند هرگز اغلب بهتر از &lt;em&gt;همین حالا&lt;/em&gt; است.&lt;br&gt;
اگر تشریح پیاده‌سازی‌اش سخت است، ایده‌ی بدی است.&lt;br&gt;
اگر تشرح پیاده‌سازی‌اش ساده است،‌ ممکن است ایده‌ی خوبی باشد.&lt;br&gt;
فضای نام‌ها ایده‌ی بی‌نظیری هستند -- بیایید بیشتر بکار ببریمشان!&lt;br&gt;&lt;/p&gt;</description>
          <pubDate>2016-05-17 07:30:28</pubDate>
          <link>/mehdix/python-zen.html</link>
          <guid isPermaLink="true">/mehdix/python-zen.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>نصب نوم ۳ روی آرچ‌لینوکس</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;در مقاله قبلی نصب آرچ را شرح دادم. حالا می‌خواهم دسکتاپ مورد علاقه‌ام را روی آن نصب کنم یعنی gnome-shell.&lt;/p&gt;

&lt;p&gt;اولین قدم ساخت یک کاربر جدید است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# useradd -m -s /bin/bash mehdi
# passwd mehdi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;برای اینکه این کاربر بتواند با sudo دستور اجرا کند باید آنرا به گروه sudo اضافه کنیم و با دستور visudo تنظیمات sudo را طوری تغییر بدهیم که کاربران عضو گروه sudo بتوانند دستورات روت را اجرا کنند. البته همه چیز با systemd عوض شده است و این روش قدیمی است. ولی من هنوز روش جدید را فرصت نکرده‌ام بخوانم.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# visudo
# find line with # %sudo ALL=... and change it to:
%sudo ALL=(ALL) ALL
# useradd -aG sudo mehdi
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;نصب Display Server&lt;/h1&gt;

&lt;p&gt;قدم بعدی نصب یک Display Server است. من تصمیم گرفتم از سرور جدید Wayland و پیاده‌سازی آن بنام Weston استفاده کنم. Wayland رفته رفته جایگزین Xorg می‌شود. از جایی که Wayland نیاز به &lt;code&gt;Kernel Mode Setting (KVM)&lt;/code&gt; دارد باید آنرا فعال کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/mkinitcpio.conf
# go to line with MODULES=&quot;&quot;
# change it to:
MODULES=&quot;i915&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;لپ‌تاپ من چیپ گرافیک مجزا ندارد و از پردازشگر گرافیکی اینتل استفاده می‌کند. برای فعال کردن KVM روی اینتل هم کافیست &lt;code&gt;i915&lt;/code&gt; را به ماژول‌های کرنل اضافه کنم. ناگفته پیداست که باید ایمیج بوت دوباره ساخته بشود:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkinitcpio -p kernel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا بسته‌های لازم را نصب می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S wayland weston xorg-server-wayland
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا Wayland را نصب کردیم که چیزی بیشتر از یک کتابخانه نیست. Wetson هم به تنهای به درد ما نمی‌خورد. xorg-sever-wayland هم برای اجرای برنامه‌های xorg از درون Wayland است. چیزی که الان نیاز داریم نصب یک دسکتاپ (نوم) و یک Display Manager برای داشتن یک صفحه لاگین اتوماتیک است.&lt;/p&gt;

&lt;h1&gt;نصب Display Manager&lt;/h1&gt;

&lt;p&gt;اول بسته‌های لازم را نصب می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S gnome gdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا باید سرویس &lt;code&gt;Gnome Display Manager (gdm)&lt;/code&gt; را در systemd فعال کنیم تا با هربار ریبوت خودش اجرا بشود:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl enable gdm.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر همه چیز مرتب پیش رفته باشد با یک ریبوت باید به صفحه لاگین گرافیکی هدایت بشویم. از تنظیمات لاگین Gnome on Wayland را انتخاب می‌کنم و لاگین می‌کنم.&lt;/p&gt;

&lt;p&gt;باقی کارها را می‌توان به صورت گرافیکی از داخل محیط نوم انجام داد، مثل اضافه کردن چیدمان فارسی برای تایپ کردن و باقی کارها. من بسته‌های ضروری‌ام را همینجا نصب می‌کنم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S gnome-extra gnome-boxes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;این بسته حاوی برنامه‌های رایج برای نوم است و البته ماشین مجازی نوم (باید قابلیت مجازی‌سازی در بایوس فعال باشد در غیر اینصورت خیلی کند خواهد بود). پک‌من سوالی می‌پرسد و من آنهایی را انتخاب می‌کنم که بدردم می‌خورد، بعد سایر برنامه‌های مهم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcaman -S openssh docker pass wget
# systemctl enable docker.service # Make docker service permanent
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;فعال‌سازی کلید سخت‌افزاری&lt;/h1&gt;

&lt;p&gt;بسیاری امروزه از کلیدهای سخت‌افزاری به عنوان ابزاری برای مکانیزم لاگین دو مرحله‌ای استفاده می‌کنند. مثلا برای لاگین در اکانت گیت‌هاب یا گوگل یا خیلی سرویس‌های دیگر. معروف‌ترین این کلید‌ها Yubikey است. من یک کلید ارزانتر بنام Happlink دارم. برای اینکه این کلیدها را لینوکس بشناسد باید یک قانون جدید به udev اضافه بشود. فایلی که اینجا به قوانین udev اضافه می‌کنیم حاوی شناسه تولیدکنندگان معروف این نوع کلیدهاست:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# this udev file should be used with udev 188 and newer
ACTION!=&quot;add|change&quot;, GOTO=&quot;u2f_end&quot;

# Yubico YubiKey
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;1050&quot;, ATTRS{idProduct}==&quot;0113|0114|0115|0116|0120|0402|0403|0406|0407|0410&quot;, TAG+=&quot;uaccess&quot;

# Happlink (formerly Plug-Up) Security KEY
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;2581&quot;, ATTRS{idProduct}==&quot;f1d0&quot;, TAG+=&quot;uaccess&quot;

#  Neowave Keydo and Keydo AES
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;1e0d&quot;, ATTRS{idProduct}==&quot;f1d0|f1ae&quot;, TAG+=&quot;uaccess&quot;

# HyperSecu HyperFIDO
KERNEL==&quot;hidraw*&quot;, SUBSYSTEM==&quot;hidraw&quot;, ATTRS{idVendor}==&quot;096e&quot;, ATTRS{idProduct}==&quot;0880&quot;, TAG+=&quot;uaccess&quot;

LABEL=&quot;u2f_end&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;مقادیر بالا را در فایلی بنام &lt;code&gt;70-u2f.rules&lt;/code&gt; در مسیر &lt;code&gt;/etc/udev/rules.d/&lt;/code&gt; ذخیره کرده و udev را ریلود می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# udevadm control --reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;فعالسازی افزونه‌های نوم با کرومیوم&lt;/h1&gt;

&lt;p&gt;برای اینکه بتوان از داخل براوزر افزونه‌های نوم را نصب کرد باید یک پلاگین روی فایرفاکس یا کروم نصب بشود. من اینجا نحوه نصب آنرا روی کروم توضیح می‌دهم. قسمت اول نصب پلاگین کروم است. کروم پلاگینی دارد بنام GNOME Shell Integration که می‌توان آنرا از از استور گوگل براحتی روی کرومیوم نصب کرد. این اکستنشن برای اینکه بتواند پلاگین‌های نوم را کنترل بکند نیاز به یک Connector دارد که باید جداگانه نصب بشود. برای این کار یک پکیج AUR وجود دارد. AUR مخفف Archlinux User Repository است. در AURها همواره یک فایل PKGBUILD وجود دارد که نصب را شرح می‌دهد و فایل‌های لازم حین نصب دانلود و بیلد می‌شوند:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://aur.archlinux.org/chrome-gnome-shell-git.git
$ cd chrome-gnome-shell-git
$ makepkg -sri
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;بعد از این مرحله کافیست به آدرس extensions.gnome.org برویم. حالا باید بتوان افزونه‌ها را فعال و غیرفعال کرد.&lt;/p&gt;

&lt;p&gt;با دنبال کردن این دستورات یکه سیستم با دسکتاپ نوم ساختیم. ویکی آرچ بهترین منبع برای یادگیری و تنظیمات بیشتر سیستم است. در صورت علاقه ویکی را برای دستورات و تنظیمات بیشمار ممکن بخوانید.&lt;/p&gt;</description>
          <pubDate>2016-05-16 07:30:28</pubDate>
          <link>/mehdix/installing-gnome-shell-on-archlinux.html</link>
          <guid isPermaLink="true">/mehdix/installing-gnome-shell-on-archlinux.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>نصب قدم به قدم آرچ‌لینوکس با رمزگزاری</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;یک لپ‌تاپ لنووی x250 با هارددیسک SSD در اختیار دارم و تصمیم گرفتم که روی آن آرچ‌لینوکس نصب کنم. در ضمن می‌خواهم که کل دیسک رمزگزاری شده، پارتیشن‌ها با GPT و دیسک‌های lvm باشند. منبع همه‌ی موارد ویکی بی‌نظیر آرچ‌لینوکس است.&lt;/p&gt;

&lt;h1&gt;ساختن فلش دیسک بوت‌شو&lt;/h1&gt;

&lt;p&gt;اول ایزوی آرچ را دانلود کردم و روی فلش کپی کردم. نکته‌ی جالب اینکه بدانید هر ایزویی که در یک ویرچوال ماشین و یا از یک سی‌دی یا دی‌وی‌دی بوت می‌شود لزوما از روی فلش دیسک بوت نمی‌شود. یک ایمیج برای اینکه از روی فلش و هارد دیسک بوت شود باید پارتیشن‌تیبل و پارتیشن‌ها را شبیه سازی بکند. بگذریم، فایل دانلودی را با ابزار قدرتمند &lt;code&gt;dd&lt;/code&gt; روی فلش می‌ریزم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dd if=archlinux-2016.05.01-dual.iso of=/dev/mmcblk0 bs=4m
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;dd شوخی بردار نیست. آدرس اشتباه بدهیم هارد اشتباهی را نابود کرده‌ایم.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;آماده کردن هاردیسک&lt;/h1&gt;

&lt;p&gt;بعد از بوت از روی فلش دیسک اول می‌روم سراغ دیسک تا آنرا GPT کنیم که جایگزین امروزی MBR است.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# fdisk -l # Print list of hard disks
# fdisk /dev/sda
# Command (m for help): g # Creates a GPT partition table
# Command (m for help): w # Save changes and exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;با ابزار &lt;code&gt;fdisk&lt;/code&gt; جدول پارتیشن را به GPT تغییر دادیم. الان هرپارتیشنی روی دیسک بوده باشد نابود شده است.&lt;/p&gt;

&lt;p&gt;حالا با ابزار &lt;code&gt;parted&lt;/code&gt; پارتیشن بوت و یک پارتیشن خالی بزرگ می‌سازم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parted
(parted) print # List partitions
(parted) mkpart ESP ext4 1MiB 513MiB
(parted) set 1 boot on
(parted) mkpart ext4 513MiB 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;ساخت پارتیشن رمزگزاری شده LUKS&lt;/h2&gt;

&lt;p&gt;با دستورات بالا اول پارتیشن کوچکی برای بوت ساختیم، بعد آنرا لیبل بوت زدیم و بعد هم در فضای باقی مانده یک دیسک بزرگ ساختیم. حالا نوبت رمزگذاری است. اینکار را با LUKS انجام می‌دهیم. توجه کنید که سناریوهای مختلفی برای اینکار وجود دارد. من تصمیم گرفتم که یک پارتیشن بوت معمولی بسازم و بعد در یک پارتیشن ثانویه با کمک LUKS یک پارتیشن رمزگزاری شده بوجود بیاورم. این مرحله را با کمک ابزار &lt;code&gt;cryptsetup&lt;/code&gt; انجام می‌دهیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cryptsetup luksFormat /dev/sda2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;دستور بالا از من یک پسورد می‌خواهد که دوبار وارد می‌کنم. حالا می‌توانم قفل این پارتیشن را باز کنم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cryptsetup open --type luks /dev/sda2 lvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;این دستور پسورد را می‌پرسد و بعد در مسیر &lt;code&gt;/dev/mapper/lvm&lt;/code&gt; پارتیشن قفل باز شده را در اختیار ما می‌گذارد. باید توجه داشت هرچند که همچنان پارتیشن اصلی در مسیر &lt;code&gt;/dev/sda2&lt;/code&gt; وجود دارد اما محتوای آن رمزگزاری شده است و نامفهوم.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;نکته مهم: اگر روی دیسک از پیش داده‌های مهم وجود دارد باید ابتدا به روش صحیح نابود بشوند.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;پارتیشن‌بندی با LVM&lt;/h2&gt;

&lt;p&gt;حالا ما یک دیسک مجازی در مسیر بالا داریم که روی آن با &lt;code&gt;Logical Volume Management (LVM)&lt;/code&gt; پارتیشن‌بندی انجام می‌دهیم. یک مقدمه کوتاه در مورد lvm. کاری که این روش مدیریت پارتیشن‌ها انجام می‌دهید اینست که وابستگی مستقیم پارتیشن فیزیکی را از پارتیشن نهایی از میان برمی‌دارد. یعنی مهم نیست که هاردیسک کجاست یا چند هاردیسک وجود دارد، ما همواره می‌توانیم که پارتیشن منطقی بسازیم که اجزای اصلی سازنده‌اش روی یک یا چند هاردیسک پخش شده باشد. در این روش به سادگی می‌توان اندازه پارتیشن را کم و زیاد کرد حتی هنگامی که سیستم در حال کار است. همچنین می‌توان فضای ذخیره‌سازی جدید به سیستم اضافه کرد و آنرا بین پارتیشن‌های مختلف تقسیم کرد.&lt;/p&gt;

&lt;p&gt;پارتیشن‌بندی با lvm سه مرحله دارد. اولین مرحله ایجاد یک &lt;code&gt;Physical Volume (PV)&lt;/code&gt; است. PVها قطعاتی هستند مثل قطعات بازی لگو که ما با آنها &lt;code&gt;Volume Group (VG)&lt;/code&gt; می‌سازیم. VGها معادل یک هارددیسک مجازی هستند. تصور کنید که من با چند هاردیسک یک دیسک مجازی بزرگ بسازیم. هر هارددیسک من می‌شود یک PV که با آنها می‌توانم یک یا چند VG بسازم. به راحتی می‌شود به یک VG دیسک‌های جدید اضافه کرد.&lt;/p&gt;

&lt;p&gt;اگر VG معادل هاردیسک باشد در مرحله بعدی به معادل یک پارتیشن معمولی نیاز داریم که به آن &lt;code&gt;Logical Volume (LV)&lt;/code&gt; گفته می‌شود. LV فضای مورد نیازش را از VG برمی‌دارد و مثل یک پارتیشن معمولی است.&lt;/p&gt;

&lt;p&gt;با توضیحات بالا می‌رویم سراغ ساختن پارتیشن‌ها. اول PV و بعد VG و بعد LVهای مورد نیاز:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pvcreate /dev/mapper/lvm
# vgcreate X1 /dev/mapper/lvm
# lvcreate -L 8G X1 -n swap
# lvcreate -L 50G X1 -n root
# lvcreate -l 100%FREE X1 -n home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;سطر اول دستورات بالا روی دیسک قفل‌باز شده (که خودش اینجا یک دیسک مجازی است چرا که پارتیشن اصلی در مسیر &lt;code&gt;/dev/sda2&lt;/code&gt; قرار دارد.) یک PV می‌سازد. خط دوم روی آن PV یک VG بنام X1 می‌سازد. خط‌های بعدی هم روی آن VG پارتیشن‌ها را می‌سازند. خط آخر کل فضای باقی مانده را به یک پارتیشن بنام home می‌دهد. پس خلاصه کار می‌شود:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;یک PV بساز&lt;/li&gt;
&lt;li&gt;یک VG بساز&lt;/li&gt;
&lt;li&gt;چند LV بساز (پارتیشن معمولی)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;حالا نوبت فرمت کردن پارتیشن‌هاست. دقت کنید که همه مسیرها مجازی هستند (&lt;code&gt;/dev/mapper/X1-something&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkfs.ext4 /dev/mapper/X1-root
# mkfs.ext4 /dev/mapper/X1-home
# mkswap /dev/mapper/X1-swap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;با وارد کردن دستور lvdisplay می‌تواند لیست پارتیشن‌های ساخته شده را دید. اگر دستور lvm را وارد کنید محیط اینتراکتیو می‌شود و می‌توانید همه دستورات مرتبط را با help ببینید. حالا هم پارتیشن‌ها را ماونت می‌کنم و می‌روم سراغ پارتیشن بوت:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mount /dev/mapper/X1-root /mnt
# mkdir /mnt/home
# mount /dev/mapper/X1-home /mnt/home
# swapon /dev/mapper/X1-swap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا نوبت پارتیشن بوت است که باید روی یک درایو رمزگزاری نشده قرار داشته باشد که ما همان ابتدا ساختیم. آنرا هم آماده و ماونت می‌کنیم و می‌رویم سروقت نصب آرچ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkfs.ext2 /dev/sda1
# mkdir /mnt/boot
# mount /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;بعد بلافاصله می‌رویم سراغ تنظیمات اینترنت:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iw dev # Get a list of devices
# wifi-menu -o wlp3s0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;من اینترنت را از روتر وایرلس خانه‌ام می‌گیرم. خط دوم لیست مودم‌های وایرلس را می‌دهد و در خط سوم اسم مودم را که از دستور دوم بدست آورده‌ام وارد می‌کنم. در اینجا اگر همه‌چیز درست پیش برود دیالوگی نمایش داده می‌شود و می‌توان شبکه درست را انتخاب و پسورد آنرا وارد کرد. بعد باید اینترنت وصل شده باشد. حالا زمان سیستم را درست می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# timedatect set-ntp true
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;نصب بیس آرچ&lt;/h1&gt;

&lt;p&gt;حالا نوبت نصب بسته‌های بیس آرچ است، شامل base و base-devel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacstrap -i /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;دقت کنید که ما در مراحل قبلی پارتیشن‌هایمان را در مسیر &lt;code&gt;/mnt&lt;/code&gt; ماونت کرده‌ایم. بعد از اتمام نصب باید fstab را ایجاد کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در مرحله بعدی فایل تنظیمات شبکه را کپی می‌کنیم و به مسیر &lt;code&gt;/mnt&lt;/code&gt; تغییر مسیر می‌دهیم و نصب را دنبال می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /etc/netct/wlp3s0-HomeNet /mnt/etc/netctl/
# arch-chroot /mnt /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اول باید تنظیمات زبان را انجام دهیم. در فایل &lt;code&gt;/etc/locate.gen&lt;/code&gt; خطوط مربوط به زبانهایی که می‌خواهیم را از کامنت خارج می‌کنیم و تنظیمات زبان را تولید می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/locale.gen # uncommet en_US.UTF-8 UTF-8 fa_IR UTF-8
# locale-gen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;فایل تنظیمات محلی را هم می‌سازیم و یکی از گزینه‌های انتخابی مرحله قبل را در اولین خط آن وارد می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/locate.conf # add LANG=en_US.UTF-8 or fa_IR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا انتخاب ناحیه زمانی:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# tzselect
# ln -s /usr/share/zoneinfo/Asia/Tehran /etc/localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;تولید ایمج بوت&lt;/h1&gt;

&lt;p&gt;حالا وقت ساختن ایمیج بوت است به کمک &lt;code&gt;mkinitcpio&lt;/code&gt;. اینجای کار باید تنظیمات را برای بوت صحیح از پارتیشن رمزگزاری شده اصلاح کنیم. فایل mkinitcpio.conf  را باز می‌کنیم و می‌رویم سراغ مهمترین بخش فایل بنام HOOKS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/mkinitcpio.conf # find HOOKS section

HOOKS=&quot;... encrypt lvm2 ... filesystems ...&quot;

# mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;مقدار HOOKS را طوری تغییر می‌دهیم که دو مقدار encrypt و lvm2 قبل از filesystems و بعد از سایر مقادیر قرار بگیرند. دستور آخر فایل تنظیمات را می‌خواند و ایمیج بوت را در مسیر &lt;code&gt;/boot&lt;/code&gt; می‌سازد.&lt;/p&gt;

&lt;h2&gt;پارامترهای کرنل&lt;/h2&gt;

&lt;p&gt;برای اینکه کرنل بتواند پارتیشن رمزگزاری شده را بفهمد و پسورد آنرا بخواهد باید تنظیماتی به آن بدهیم. برای اینکار باید تصمیم بگیریم که کدام بارگزار را می‌خواهیم نصب کنیم چون هر کدام تنظیماتشان را جداگانه ذخیره می‌کنند. برای این لپ‌تاپ من تصمیم گرفتم Syslinux را نصب کنم. اول خود پکیج باید نصب شود:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S syslinux gptfdisk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا باید پارامتر لازم برای اینکه کرنل پارتیشن ما را پیدا کند و بخواند را به فایل تنظیمات syslinux اضافه کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /boot/syslinux/syslinux.cfg
# Go to &quot;LABEL arch&quot; section and edit line with APPEND
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در این فایل باید منوی آرچ را پیدا کنیم که محتوای آن چیزی است شبیه به این:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LABEL arch
   MENU ....
   LINUX ...
   APPEND root=/dev/sda3 rw
   INITRD ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;سه نقطه‌ها را من گذاشته‌ام، برای ما مهم نیستند. خطی که باید تغییر کند خط APPEND است که ما آنرا با مقدار زیر جایگزین می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;APPEND cryptdevice=UUID=&amp;lt;uuid of the /dev/sda2&amp;gt;:lvm root=/dev/mapper/X1-root rw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;مقدار uuid را برای &lt;code&gt;/dev/sda2&lt;/code&gt; به کمک دستور &lt;code&gt;blkid&lt;/code&gt; بدست می‌آید. حالا به کمک اسکریپتی که همراه با syslinux نصب شده (که جزو آرچ است نه آپ‌استریم) بوت لودر را نصب می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# syslinux-install_update -i -a -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا تنظیمات پیش از ریبوت کردن را انجام می‌دهیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/hostname # pick up a name
# pacman -S iw wpa_supplicant dialog # installs it inside chroot environment
# passwd # pick up a password
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;ریبوت&lt;/h1&gt;

&lt;p&gt;حالا از chroot خارج می‌شویم و ریبوت می‌کنیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# exit # exit from chroot
# umount -R /mnt # unmount everything
# reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;بعد از حبس کردن نفسم و بوت شدن کامپیوتر تایید می‌کنم که دستورات بالا بدون نقص کار کردند. اول منوی بوت syslinux ظاهر شد و بعد از انتخاب بوت آرچ پسورد پارتیشن رمزگزاری شده ازم خواسته شد. بعد از وارد کردن اون سیستم بوت شد و لاگین آرچ ظاهر شد! هورا!&lt;/p&gt;

&lt;p&gt;بعد از بوت وایرلس کار نمی‌کرد. حتما چیزی رو جا انداختم بهرحال با دو دستور ساده درست شد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iw dev # to get name of the wireless card
# wifi-menu -o wlp3s0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;آپدیت: متوجه شدم که با هر بار ریبوت وایرلس خودکار وصل نمی‌شود و باید با دستور بالا وصل بشوم. برای رفع این مشکل با دستور netctl سرویسی برای راه‌اندازی خودکار وایرلس به systemd اضافه کردم که مشکل را حل کرد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# netctl list # get the name of connections
# netctl enable &amp;lt;connectionn name here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر در اسم فایل فاصله و کاما وجود دارد قبلشان یک بک‌اسلش اضافه کنید.&lt;/p&gt;

&lt;h1&gt;گام بعدی&lt;/h1&gt;

&lt;p&gt;گام بعدی نصب gnome-shell روی لپ تاپ است که در مقاله‌ای دیگر می‌نویسم.&lt;/p&gt;</description>
          <pubDate>2016-05-15 07:30:28</pubDate>
          <link>/mehdix/archlinux_installation_with_lucks_and_lvm.html</link>
          <guid isPermaLink="true">/mehdix/archlinux_installation_with_lucks_and_lvm.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>انتشار ساقی‌بات</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;بعد از سپری کردن یک آخر هفته پرکار بالاخره اولین ربات تلگرام من آماده شد. &lt;a href=&quot;https://telegram.me/SaaghiBot&quot;&gt;ساقی‌بات&lt;/a&gt; از این لحظه آماده استفاده است.&lt;/p&gt;

&lt;h1&gt;بات چیست؟&lt;/h1&gt;

&lt;p&gt;پیام‌رسان تلگرام را احتمالا می‌شناسید، چرا که در ایران کاربران زیادی دارد. در ماه ژوئن سال گذشته میلادی (تقریبا تیرماه) تیم تلگرام &lt;a href=&quot;https://telegram.org/blog/bot-revolution&quot;&gt;بات&lt;/a&gt; را برای اولین بار معرفی کرد. یک بات تلگرام مثل یک اکانت معمولی می‌ماند با اندکی تفاوت. اول اینکه نام (username) همه‌ی بات‌ها به Bot ختم می‌شود. پس می‌شود بسادگی آنها را از سایر حسابهای کاربری تشخیص داد. دیگر اینکه بات نمی‌تواند سرخود به کاربر پیام بدهد بلکه فقط قادر است به پیام‌ها جواب بدهد. بنابراین بات‌ها نمی‌توانند مزاحمتی برای کاربران ایجاد کنند. از جایی که بات هم یک حساب تلگرام است بنابراین می‌تواند مثل سایر حسابها برایش پیام فرستاد. اما پاسخ دادن یا ندادن به پیام بر عهده‌ی خود بات است (همانطور که هر کسی تصمیم می‌گیرد که به پیام ما جواب بدهد یا آنرا ندید بگیرد). هر بات هم تعدادی فرمان دارد که با&lt;code&gt;/&lt;/code&gt; شروع می‌شوند. بیشتر بات‌ها فرامین &lt;code&gt;/start&lt;/code&gt; و &lt;code&gt;/help&lt;/code&gt; را دارند.&lt;/p&gt;

&lt;p&gt;{: .center .post-image}
&lt;img src=&quot;assets/pimg/saaghiabout.jpg&quot; alt=&quot;Image not found&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;تعامل با بات&lt;/h2&gt;

&lt;p&gt;به دو طریق می‌توان با بات تعامل داشت. اول ارسال عادی پیام (یا فرمان) مستقیما به خود بات. دوم صدا زدن یک بات در یک گروه یا گفتگوی ثالث. به این قابلیت بات‌ها &lt;code&gt;Inline Query&lt;/code&gt; گفته می‌شود که تیم تلگرام در روز چهارم ژانویه &lt;a href=&quot;https://telegram.org/blog/inline-bots&quot;&gt;معرفی کرد&lt;/a&gt;. در هر گفتگو یا گروهی می‌توان بات را به صورت &lt;code&gt;@BotName&lt;/code&gt; یاد کرد (مِنشِن کرد). همچنین همزمان می‌توان پارامترهایی به بات ارسال کرد: &lt;code&gt;@BotName param1 param2 etc.&lt;/code&gt;. بات در پاسخ به این درخواست (کوئری) می‌تواند چند نتیجه مثل عکس، لینک، جیف و مانند اینها را در پایین صفحه نمایش لیست کند و کاربر یکی نتیجه را از میان آنها انتخاب می‌کند تا در گفتگوی مربوطه نوشته شود. من از این قابلیت در ساقی‌بات برای نمایش لیستی از رباعیات استفاده کرده‌ام.&lt;/p&gt;

&lt;p&gt;{: .center .post-image}
&lt;img src=&quot;assets/pimg/saaghiquery.jpg&quot; alt=&quot;Image not found&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;بات چطور کار می‌کند؟&lt;/h1&gt;

&lt;p&gt;یک بات هم شبیه به حساب کاربری یک دوست است. اول اینکه باید نام کاربری‌اش را دانست و بعد می‌توان با بات گفتگو کرد. بات‌ها می‌توانند به پیام‌ها پاسخ بدهند یا یک &lt;code&gt;State Machine&lt;/code&gt; پیچیده را پیاده‌سازی کنند. ولی معماری کلی کار بات ساده است. وقتی یک کاربر به یک بات پیامی می‌فرستد، تلگرام یک &lt;code&gt;Update&lt;/code&gt; را یا از طریق &lt;code&gt;Polling&lt;/code&gt; یا &lt;code&gt;Web Hooks&lt;/code&gt; به یک برنامه که جایی روی یک کامپیوتر متصل به اینترنت در حال اجراست ارسال می‌کند. این آپدیت حاوی مشخصات پیام و مشخصات کاربر ارسال کننده پیام است. برنامه‌ی بات هم پس از انجام پردازش‌های لازم پیامی به سرور تلگرام ارسال می‌کند که حاوی توکن و پاسخ است که به نوبه خود پاسخ را تلگرام از آن استخراج کرده و به کاربر می‌فرستد و همینطور الی آخر.&lt;/p&gt;

&lt;h1&gt;چطور می‌شود یک بات ساخت؟&lt;/h1&gt;

&lt;p&gt;برای اینکار هم یک بات وجود دارد! تلگرام بسادگی و از طریق &lt;a href=&quot;https://telegram.me/BotFather&quot;&gt;BotFather&lt;/a&gt; امکان ساخت بات جدید را می‌دهد. اگر با این بات چت کنید می‌توانید با ارسال فرمان &lt;code&gt;/newbot&lt;/code&gt; و با دادن نام و نام کاربری دلخواه یک بات جدید بسازید. &lt;code&gt;BotFather&lt;/code&gt; در عوض به شما یک Token می‌دهد که برای تعامل با بات باید از آن استفاده کرد. یعنی باید با هر درخواست آن را به سرور تلگرام ارسال کرد. تلگرام یک HTTP API فراهم کرده که می‌توان از آن طریق با بات صحبت کرد. ولی نیازی به انجام مسقتیم اینکار نیست چرا که برای زبانهای برنامه‌نویسی مختلف روال‌های سطح پایین نوشته شده‌اند.&lt;/p&gt;

&lt;h1&gt;ساقی‌بات چیست؟&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://mehdix.ir/projects/SaaghiBot&quot;&gt;ساقی‌بات&lt;/a&gt; یک ربات تلگرام است که برای کاربر رباعی خیام می‌فرستد. این کار را به دو طریق انجام می‌دهد. اگر با «ساقی» چت کنید، او در دیتاهای خودش دنبال هر کلمه‌ای که برایش بفرستید می‌گردد و یک رباعی شامل آن کلمه را به عنوان پاسخ می‌فرستد. اگر چند با هم ارسال کنید او دنبال یک رباعی می‌گردد که شامل همه‌ی آن کلمات باشد.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ساقی‌بات یک روبات تلگرام است. اسم خودمانی‌اش ساقی است. کارش هم ارسال رباعی خیام به انتخاب کاربر است.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;اما ساقی از &lt;code&gt;Inline Query&lt;/code&gt; هم پیشتبانی می‌کند که در حقیقت روش بهتر کار با ساقی است. برای اینکار در ورودی تلگرام باید نام ساقی و بعد یک فاصله و بعد کلمات دلخواه را وارد کرد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SaaghiBot می پیاله
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;داده‌های ساقی‌بات کجاست؟&lt;/h1&gt;

&lt;p&gt;ساقی بات از فایل &lt;code&gt;YAML&lt;/code&gt; &lt;a href=&quot;http://mehdix.ir/omar-khayyam-in-yaml-format.html&quot;&gt;رباعیات خیام&lt;/a&gt; که پیش از این منتشر کرده‌ام استفاده می‌کند. خود ساقی هم یک برنامه‌ی اوپن‌سورس است و با نود نوشته شده است. اطلاعات دیگری هم در &lt;a href=&quot;http://mehdix.ir/projects/SaaghiBot&quot;&gt;صفحه ویژه پروژه&lt;/a&gt; وارد کرده‌ام.&lt;/p&gt;

&lt;h1&gt;نتیجه‌گیری&lt;/h1&gt;

&lt;p&gt;ساقی یک بات تمرینی است. تلگرام یک پلتفرم اختصاصی است و من علاقه چندانی به کار روی پلتفرم‌های خاص ندارم اما تلگرام میلیون‌ها کاربر در ایران دارد و به همین خاطر مهم است. از طریق بات‌ها می‌توان سرویس‌های زیادی به کاربر عرضه کرد، از یک جستجوگر ساده مثل ساقی گرفته تا رباتی که با شما گیم بازی کند یا مشاوره بدهد یا راه را نشانتان بدهد یا برایتان محصولی سفارش بدهد. خلاصه خیلی ایده‌ها را می‌توان روی آن سوار کرد. امیدوارم که رباتهای جالبی در وب فارسی ببینیم.&lt;/p&gt;

&lt;h1&gt;دوشنبه‌های شاد آخر ماه&lt;/h1&gt;

&lt;p&gt;من از &lt;a href=&quot;http://jadi.net/&quot;&gt;جادی&lt;/a&gt; خواستم که ساقی را در لینک‌های دوشنبه‌های شاد آخر ماه به خوانندگانش معرفی کند. قرار هم گذاشته‌ام که اگر ساقی جواب داد بات دیگری به همین سبک منشر کنم که کار ساده ولی مهمی انجام می‌دهد. بابت معرفی ساقی از او تشکر می‌کنم.&lt;/p&gt;</description>
          <pubDate>2016-02-07 07:30:28</pubDate>
          <link>/mehdix/saaghibot-released.html</link>
          <guid isPermaLink="true">/mehdix/saaghibot-released.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>گواهینامه SSL/TLS مجّانی برای همه</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;امروز در جریان یک خبر خوشحال کننده قرار گرفتم. اگر تا پیش از این می‌خواستیم یک گواهینامه SSL/TLS معتبر برای استفاده از پروتکل HTTPS برای وبسایتمان تهیه کنیم باید یک گواهینامه می‌خریدیم. دیگر نیازی به اینکار نیست.&lt;/p&gt;

&lt;h1&gt;وضعیت قبلی: دلالی گواهینامه معتبر&lt;/h1&gt;

&lt;p&gt;برای خرید یک گواهینامه ساده باید تقریبا ده دلار خرج کرد، حالا کمی کمتر یا بیشتر. اینکار هم هزینه دارد هم دردسر. باید یک واسطه پیدا کرد که روش پرداخت ما را قبول کند، یا از شرکت‌های واسط دیگر استفاده کرد. تازه در نهایت ساده‌ترین نوع گواهینامه گیر آدم می‌آید. اگر بخواهیم برای یک زیردامنه هم از گواهینامه‌مان استفاده کنیم باید که هزینه بیشتری پرداخت کرد. همینطور که نیاز به گواهینامه تغییر می‌کند باید دائم هزینه کنیم. بدتر از همه اینها اینست که امنیت وب تبدیل به یک کسب و کار شده است و این اصلا چیز خوبی نیست. امنیت باید در وب به صورت پیش‌فرض  وجود داشته باشد، آنهم برای همه، نه به شرط پول خرج کردن.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;امنیت باید در وب به صورت پیش‌فرض  وجود داشته باشد، آنهم برای همه، نه به شرط پول خرج کردن&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;البته ما همچنان می‌توانسیتم گواهینامه‌های به اصطلاح Self Signed تولید کنیم اما موقع باز کردن وبسایت همیشه مرورگر یک پیام هشدار مبنی بر ناشناخته بودن گواهینامه نمایش می‌داد که این هم چیز خوبی نبود.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/pimg/untrusted_certificate.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;وضعیت فعلی: گواهینامه معتبر برای همه&lt;/h1&gt;

&lt;p&gt;حالا مدتی است که یک &lt;code&gt;Certificate Authority (CA)&lt;/code&gt; جدید بوجود آمده است. نام‌های شناخته شده‌ای پشت این حرکت هستند، مثل Mozilla. نام این CA جدید &lt;em&gt;Letsencrypt&lt;/em&gt; است. این CA به ما امکان تولید گواهینامه‌های معتبر توسط خودمان را می‌دهد. این CA الان مدتی است که وارد فاز بتا شده است و از یک جنبش به یک واقعیت تبدیل شده است. برای تولید یک گواهینامه معتبر کافیست دستوراتی که در ‮‬&lt;a href=&quot;https://letsencrypt.org&quot;&gt;سایت آنها&lt;/a&gt; آمده است دنبال کنیم.&lt;/p&gt;

&lt;h2&gt;روش تولید یک گواهینامه&lt;/h2&gt;

&lt;p&gt;این CA به ما یک برنامه به نام &lt;code&gt;letsencrypt-auto&lt;/code&gt; می‌دهد که به کمک آن گواهینامه‌های معتبر ۹۰ روزه تولید می‌کنیم. این برنامه کمکی علاوه بر این می‌تواند وب سرور آپاچی و به صورت آزمایشی nginx را به طور خودکار بروز کند. باید به ترتیب کارهای زیر را روی سرور وب انجام داد (به نقل از خود سایت).&lt;/p&gt;

&lt;p&gt;ابتدا برنامه را از روی گیت‌هاب دریافت و اجرا می‌کنیم تا نیازمندی‌هایش را نصب کند:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/letsencrypt/letsencrypt
$ cd letsencrypt
$ ./letsencrypt-auto --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر آپاچی داریم دستورش این است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto --apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر هم سرور دیگری داریم و فقط فایل‌های گواهینامه را می‌خواهیم روش کار اینست:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto certonly --webroot -w /var/www/example -d example.com -d www.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;برای من برنامه فایل‌ها را تولید کرد و در آدرس &lt;code&gt;/etc/letsencrypt/live&lt;/code&gt; کپی کرد. برای تجدید گواهینامه (که این هم مجانی است!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./letsencrypt-auto certonly --keep-until-expiring --webroot -w /var/www/example.com -d example.com,www.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;دستورات بیشتری در &lt;a href=&quot;https://letsencrypt.org/howitworks/&quot;&gt;صفحه راهنمای&lt;/a&gt; پروژه جهت مطالعه وجود دارد.&lt;/p&gt;

&lt;h1&gt;وضعیت آینده: تولید خودکار گواهینامه&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/letsencrypt/letsencrypt&quot;&gt;صفحه کلاینت این پروژه روی گیت‌هاب&lt;/a&gt; تابحال بیش از ۱۱۷۰۰ ستاره خورده است. همین کافیست که ببینیم این پروژه بسیار مورد توجهی است. پروژه هم بیش از ۵۰۰۰ کامیت و ۱۴۷ مشارکت‌کننده دارد. همه اینها یعنی که این پروژه را از نظر دور نکنیم. به گفته خودشان بزودی نسخه‌ای منتشر خواهند کرد که هم سرورهای وب بیشتری را پشتیبانی می‌کند و هم فرآیند تولید گواهینامه را به طور خودکار چند وقت یکبار انجام می‌دهد و نیازی به مداخله کاربر نیست.&lt;/p&gt;

&lt;p&gt;من همین امروز برای سه تا وبسایت گواهینامه معتبر ساختم و از شر گواهینامه‌های Self Signed خلاص شدم :)&lt;/p&gt;

&lt;p&gt;{: .center}
&lt;img src=&quot;assets/pimg/mehdix.org_letsencrypt.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</description>
          <pubDate>2016-02-01 07:30:28</pubDate>
          <link>/mehdix/free-https-for-all.html</link>
          <guid isPermaLink="true">/mehdix/free-https-for-all.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>انتشار ۱۰۶ رباعی خیام با فرمت YAML</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;وب فارسی از نظر دسترسی به داده‌های دارای متادیتا خیلی ضعیف است. داده اگر هم وجود داشته باشد ساختار ندارد. این شد که کتاب کوچک خیام خودم را به فرمت &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; درآوردم.&lt;/p&gt;

&lt;h1&gt;متادیتا&lt;/h1&gt;

&lt;p&gt;متادیتا یعنی داده راجع به داده. یعنی وقتی ماشین داده‌ها را می‌خواند می‌تواند بفهمد آنها به چه دردی می‌خورند. مثلا یک صوتی با فرمت mp3 را در نظر بگیریم. طبق تعریف این فرمت امکان ذخیره داده‌هایی غیر از اصوات در این فایل هست. مثلا نام آلبوم، آهنگساز، ژانر و مانند اینها. حالا اگر یک آرشیو موسیقی داشته باشیم که متادیتا هم داشته باشد برنامه‌های مختلف می‌توانند در جستجو به ما کمک کنند. ولی در نبود این متادیتا همه فایل‌ها شبیه به هم هستند. باید هر یک را باز کرد و گوش کرد تا فهمید داخلش چیست. بگذریم از اینکه هوش مصنوعی امروز می‌تواند آنها را هم گوش بکند و نتیجه بگیرد داخلش چیست. در نبود متادیتا داده‌ها را در نازل‌ترین شکل خود بکار می‌گیریم.&lt;/p&gt;

&lt;p&gt;آنچه در مورد مورد متادیتا گفتم راجع به اشعار هم صدق می‌کند. مثلا اگر جستجوی در وب فارسی بزنید کلی وبسایت و وبلاگ پیدا می‌کنید که اشعار را به صورت پراکنده یا دسته‌بندی شده روی سایت قرار داده‌اند. اما هیچ کجا رباعیات خیام را در یک فرمت ماشین‌پسند مانند YAML یا JSON به همراه یک لایسنس آزاد پیدا نکردم. مثلا صدها بیت شعر که در وب کپی شده‌اند به درد من نمی‌خورند. من اشعاری می‌خواهم با ذکر منبع و دارای مجوز استفاده آزاد و در یک قالبی که براحتی بتوان در یک برنامه از آن استفاده کرد.&lt;/p&gt;

&lt;h1&gt;۱۰۶ رباعی&lt;/h1&gt;

&lt;p&gt;من مدتهاست کتاب کوچکی دارم که ۱۰۶ رباعی خیام را در خود جا داده است. کتاب «رباعیات عمر خیّام» نام دارد و حاصل کوشش «محسن مجید تجریشی» است. طی روزهای گذشته نشستم و کل رباعی‌ها را در یک فایل YAML پیاده کردم. فایل حاوی رباعی‌ها را در یک مخزن روی گیت‌هاب آپلود کرده‌ام که می‌توانید آنرا &lt;a href=&quot;https://github.com/mehdisadeghi/khayyam/blob/master/khayyam.yaml&quot;&gt;دانلود&lt;/a&gt; و استفاده کنید. مجوز هم داخل فایل ذکر شده است.&lt;/p&gt;

&lt;p&gt;فایل حاوی چند فیلد برای روشن کردن هدف فایل و لایسنس و منابع است. سپس یک فیلد بنام 'RUBAIYAT' وجود دارد که به ترتیب شماره از ۱ تا ۱۰۶ رباعی‌ها را در خود جا داده است. هر رباعی چهار مصرع دارد که با حروف A و B و C و D از یکدیگر متمایز شده‌اند. در پایتون می‌توان با پکیج &lt;code&gt;pyyaml&lt;/code&gt; فایل YAML را خواند:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from yaml import CLoader as Loader, CDumper as Dumper
&amp;gt;&amp;gt;&amp;gt; from yaml import load, dump
&amp;gt;&amp;gt;&amp;gt; f = open('khayyam.yaml', 'r')
&amp;gt;&amp;gt;&amp;gt; data = load(f, Loader=Loader)
&amp;gt;&amp;gt;&amp;gt; data.keys()
['License', 'Reference', 'Author', 'Introduction', 'RUBAIYAT', 'Version', 'KHAYYAM', 'Resources']
&amp;gt;&amp;gt;&amp;gt; print data['RUBAIYAT'][93]['A']
ایکاش که جای آرمیدن بودی
&amp;gt;&amp;gt;&amp;gt; print data['RUBAIYAT'][93]['B']
یا این رهِ دور را رسیدن بودی
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر از konsole یا mlterm استفاده کنید رباعی‌ها به درستی در ترمینال نمایش داده می‌شوند. در ترمینال نوم (گنوم) هم می‌شود با دستور fribidi حرف‌ها را به هم چسبیده نمایش داد.&lt;/p&gt;

&lt;h1&gt;قدم‌های بعدی&lt;/h1&gt;

&lt;p&gt;حالا که داده خام به قالب مناسب در دست است می‌توان از آن در ساختن برنامه‌های دیگری استفاده کرد. مثلا نمایش رندم یک رباعی. یا نمایش یک رباعی که حاوی کلمه خاصی است. یا نوشتن یک بوت تلگرام که این کارها را برای ما انجام بدهد.&lt;/p&gt;</description>
          <pubDate>2016-01-29 07:30:28</pubDate>
          <link>/mehdix/omar-khayyam-in-yaml-format.html</link>
          <guid isPermaLink="true">/mehdix/omar-khayyam-in-yaml-format.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>پروتکل چت اینترنت و اسکرین</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من دوست دارم که در کانال‌های IRC پروژه‌های اینترنتی مورد علاقه‌ام حاضر شوم و از برنامه‌نویسان و کاربران آن پروژه‌ها برای شروع کار و رفع مشکلاتم کمک بگیرم. این نوشته در مورد ابزار انجام اینکار است.&lt;/p&gt;

&lt;p&gt;ماجرا از اتاق گفتگوی اینترنتی ‏&lt;a href=&quot;www.tehlug.org&quot;&gt;تهلاگ&lt;/a&gt; شروع شد. گهگاه به این کانال سر می‌زدم اما با خاموش کردن کامپیوترم تاریخچه چت را از دست می‌دادم. (البته اگر اصلا چتی وجود داشت...) از طرفی باز نگه داشتن پنجره چت هم کار ساده‌ای نبود. در ضمن هرچه بیشتر با پروژه‌های آزاد اینترنتی آشنا می‌شدم می‌دیدم که بسیاری از کاربران قدیمی‌تر و هکرها و حرفه‌ای‌ها از پروتکل چت اینترنت (irc) استفاده می‌کنند و می‌توان با آنها از این طریق گفتگو کرد. پروژه‌های مورد علاقه‌ام همچون فایرفاکس و نوم (گنوم) هم هر کدام تعداد زیادی کانال دارند که هر یک به یک موضوع خاص اختصاص دارد. برای اینکه بتوانم در این کانال‌ها حاضر باشم ابزارهای مختلفی را امتحان کردم. اول با برنامه‌های گرافیکی شروع کردم: smuxi و xchat و chatzilla (که یک پلاگین فایرفاکس است) و در آخر هم سراغ یکی از برنامه‌های نوم رفتم بنام polari. اما هیچ‌کدام از اینها راضی‌ام نکرد. دست آخر راه حل دلخواهم را پیدا کردم: استفاده همزمان از &lt;a href=&quot;https://www.gnu.org/software/screen/&quot;&gt;screen&lt;/a&gt; و &lt;a href=&quot;https://irssi.org/&quot;&gt;irssi&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;دست آخر راه حل دلخواهم را پیدا کردم: استفاده همزمان از screen و irssi روی یک سرور همیشه روشن مثلا رازبری‌پای.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h1&gt;GNU Screen&lt;/h1&gt;

&lt;p&gt;جدا از نیازهای بالا من می‌خواهم به همان کانال‌هایی که سر کارم وصل هستم در منزل هم دسترسی داشته باشم، آنهم با حداقل دردسر. مدتها بود که می‌دیدم عده‌ای در چت همیشه حضور دارند، برایم سوال بود که چطور؟ با جستجو در اینترنت فهمیدم که ابزاری وجود دارد به نام GNU Screen. این برنامه به ما امکان می‌دهد که یک shell روی سرور باز کنیم که وابسته به اتصال SSH ما نیست. یعنی با قطع شدن اتصال برنامه از بین نمی‌رود. این را می‌توان روی کامپیوتر شخصی هم اجرا کرد. یعنی به حال لینوکس که فرقی نمی‌کند. مثال رایج در سایت خود برنامه دانلود فایل است. مثلا فایلی حجیم در حال دانلود است (فرضا با wget) ولی ما می‌خواهیم اتصال SSH را قطع کنیم. در حالت عادی قطع این اتصال منجر به کشته شدن پروسه‌هایی خواهد شد که تحت آن در حال اجرا بوده‌اند و بنابراین دانلود ما هم نیمه‌ کاره قطع خواهد شد. راه حل رایج اجرا کردن screen بلافاصله بعد از اجرای شل است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mehdi@debian:~$ ssh mehdix.org
    mehdi@mehdix.org:~$ screen
    mehdi@mehdix.org:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ظاهرا هیچ اتفاق خاصی نمی‌افتد. اما در حقیقت ما دیگر داخل screen هستیم. مثلا با اجرا فرمان زیر می‌توانیم این وضع را ببینیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mehdi@mehdix:~$ screen -ls
There are screens on:
        16746.pts-4.mehdix      (01/26/2016 05:48:49 PM)        (Attached)
        13084.pts-0.mehdix      (01/25/2016 05:35:56 AM)        (Detached)
2 Sockets in /var/run/screen/S-mehdi.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در مثال بالا مشخص است که من دو پروسه‌ی اسکرین دارم (یکی قبل از نوشتن این مطلب باز بود). کلمه Attached یعنی که آن پروسه‌ی اسکرین در یک پنجره باز و فعال است. ما می‌توانیم با فشردن کلید &lt;code&gt;Ctrl + A&lt;/code&gt; و بعد کلید &lt;code&gt;d&lt;/code&gt; از اسکرین خارج بشویم. اگر اینکار را بکنید و بعد دستور &lt;code&gt;screen -ls&lt;/code&gt; را اجرا کنید می‌بینید که بجای Attached نوشته می‌شود Detached. همانطور که در بالا می‌بینید من یک اسکرین detach شده هم از قبل دارم. اسکرین چند فرمان مهم دارد. یکی Ctrl و A است. همیشه برای اینکه اسکرین گوش به فرمان شود باید این ترکیب را فشار بدهیم. بعد به ترتیب:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;w: پنجره‌‌های مجازی داخل اسکرین را لیست می‌کند&lt;/li&gt;
&lt;li&gt;d: بدون کشتن پروسه اسکرین فقط از آن جدا می‌شود&lt;/li&gt;
&lt;li&gt;A: اجازه می‌دهد یک نام برای آن پنجره مجازی اسکرین انتخاب کنیم&lt;/li&gt;
&lt;li&gt;w: پنجره‌ها را لیست می‌کند&lt;/li&gt;
&lt;li&gt;0-9: آن پنجره را در صورت وجود نمایش می‌دهد&lt;/li&gt;
&lt;li&gt;?: لیست دستورات اسکرین را نمایش می‌دهد&lt;/li&gt;
&lt;li&gt;c: یک پنجره جدید می‌سازد&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;دستورات بالا داخل اسکرین بکار می‌روند. موقع اجرا اگر می‌خواهید به یک اسکرین موجود وصل بشوید کافیست دستور زیر را بزنید:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;irssi&lt;/h1&gt;

&lt;p&gt;اسکرین قطعه اول پازل بود. قطعه‌ی بعدی یک برنامه‌ی چت زیبای تحت کنسول است. بله، تحت ترمینال! irssi بهترین برنامه‌ای چتی است که تابحال استفاده کرده‌ام. هیچ کدام از برنامه‌های گرافیکی قبلی برای من لذت کار با irssi را فراهم نکرده بودند. حالا کافیست بعد از اجرای اسکرین irssi را اجرا کنم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Irssi v0.8.17 - http://www.irssi.org                                           
00:07 -!-  ___           _
00:07 -!- |_ _|_ _ _____(_)
00:07 -!-  | || '_(_-&amp;lt;_-&amp;lt; |
00:07 -!- |___|_| /__/__/_|
00:07 -!- Irssi v0.8.17 - http://www.irssi.org

 [00:07] [] [1]                                                                 
[(status)] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;دستورات مهم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/connect SERVER # مثلا irc.freenode.net
/server # لیست سرورهایی که به آنها وصلیم
/join #channel # مثلا /join #tehlug
/nick NICKNAME # برای انتخاب نیک
/window close # بستن یک پنجره
/help # نمایش داستورات موجود برنامه
/help COMMAND_NAME # نمایش راهنمای دستور
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اگر به چند سرور وصل باشید با فشردن &lt;code&gt;Ctrl + X&lt;/code&gt; می‌توان بین آنها حرکت کرد (سرور فعال عوض می‌شود). اگر چند پنجره باز کرده‌باشد (مثلا به چندین کانال وصل باشید) می‌توان با ترکیب کلید Alt و یک عدد از صفر تا نه بین پنجره‌های مجازی برنامه حرکت کرد. اگر می‌خواهید پیام‌های قدیمی‌تر را ببینید یا به اصطلاح backscroll کنید کلید Page Up/Down را بکار ببرید. در ضمن اگر دستوری تایپ کردید اما هیچ خروجی‌ای ندیدید گیچ نشوید، حتما خروجی در پنجره مجازی جداگانه‌ای درج شده است. کافیت با کلید Alt و اعداد بین پنجره‌ها حرکت کنید.&lt;/p&gt;

&lt;h1&gt;ترمینال معلّق&lt;/h1&gt;

&lt;p&gt;من دوست دارم پنجره چت همیشه باز باشد از طرفی جلوی دست و پا نباشد! راه حلش هم یک ترمینال کشویی ساده است که هر وقت من کلید میانبر را فشار می‌دهم از بالای دسکتاپم سُر بخورد و بیاید پایین. من &lt;a href=&quot;https://extensions.gnome.org/extension/442/drop-down-terminal/&quot;&gt;Gnome Drop Down Terminal&lt;/a&gt; را نصب کردم و irssi را همیشه آنجا باز می‌گذارم. شما هر چه دوست دارید نصب کنید!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/pimg/irssi_drop_down.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;نتیجه کلام&lt;/h1&gt;

&lt;p&gt;مطمئن باشید تکنیک‌های زیادی هست که من اینجا نگفتم و کلی چیز هم هست که اصلا نمی‌دانم. (چون قرار نیست همه چیز را یاد بگیرم، یاد گرفتن به قدر نیاز خودم کافی است.) به باور من استفاده موثر از irc دریچه‌ایست به سوی همکاری با هکرهایی که در گوشه و کنار دنیا مشغول کد زدن هستند. از طرف دیگر مهم است که تاریخچه چت را از دست نداد (پروتکل irc آنرا پشتیبانی نمی‌کند). بنابراین ترکیب irssi و اسکرین راه حلی است که می‌تواند هر دو این نیازها را برآورده کند.&lt;/p&gt;</description>
          <pubDate>2016-01-26 07:30:28</pubDate>
          <link>/mehdix/irc-with-screen.html</link>
          <guid isPermaLink="true">/mehdix/irc-with-screen.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>لیستی با حروف ابجد</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;شاید برای شما هم پیش آمده باشد که خواسته باشید لیستی را در وب به سبک و سیاق کشورمان با ارقام فارسی و یا حروف ابجد شماره‌گذاری کنید. در گذشته این کار امکانپذیر نبود. اما خب، امروز هر کار دلمان بخواهد می‌توانیم انجام بدهیم.&lt;/p&gt;

&lt;h1&gt;استیل شماره‌گذاری&lt;/h1&gt;

&lt;p&gt;هدف این پست معرفی &lt;a href=&quot;http://www.w3.org/TR/css-counter-styles-3/&quot;&gt;پیشنهاد جدیدی&lt;/a&gt; بنام &lt;code&gt;CSS Counter Styles Level 3&lt;/code&gt; است که توسط کنسرسیوم جهانی وب به 3 CSS اضافه شده است. این پیشنهاد همچنان در دست تکمیل است و نسخه‌های مختلف آن را می‌توان در &lt;a href=&quot;https://drafts.csswg.org/css-counter-styles-3/&quot;&gt;سایت اینترنتی&lt;/a&gt; گروه کاری[^1] CSS  مشاهده کرد. &lt;/p&gt;

&lt;p&gt;در حالت عادی یک لیست مرتب شده[^2] در HTML اینطور تعریف می‌شود:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;آیتم اول&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;آیتم دوم&amp;lt;/li&amp;gt;
... الی آخر
&amp;lt;/ol&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;خروجی پیش‌فرض چنین لیستی چنین خواهد بود:&lt;/p&gt;

&lt;ol style=&quot;list-style-type:decimal&quot; &gt;
&lt;li&gt;آیتم اول&lt;/li&gt;
&lt;li&gt;آیتم دوم&lt;/li&gt;
&lt;li&gt;سر آیتم
    &lt;ol style=&quot;list-style-type:decimal&quot;&gt;
        &lt;li&gt;زیر آیتم اول&lt;/li&gt;
        &lt;li&gt;زیر آیتم دوم&lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;اولین کاری که دوست داریم بکنیم اینست که ارقام را فارسی کنیم. باید بخاطر داشت که کدهای ارقام فارسی با عربی فرق می‌کند. صفر تا نه را در فارسی اینطور می‌نویسیم: ۰ ۱ ۲ ۳ ۴ ۵ ۶ ۷ ۸ ۹ و در عربی اینطور: ٠ ١ ٢ ٣ ٤ ٥ ٦ ٧ ٨ ٩ (به ارقام چهار و پنج و شش توجه کنید) تفاوت‌های جزئی دیگری هم هست، مثلا در نوشتن کاف (ك) و ی (ي). هنوز هم روزی نیست که نوشتاری نبینم که بی هیچ گونه توجهی به این نکات ظریف، زشت و غلط نوشته و منتشر شده است.&lt;/p&gt;

&lt;p&gt;برگردیم سر فارسی سازی خودمان. با ست کردن ‬یک پراپرتی CSS از تگ &lt;code&gt;ol&lt;/code&gt; بنام &lt;code&gt;list-style-type&lt;/code&gt; می‌توان نحوه شماره‌گذاری لیست را تغییر داد. این پراپرتی چیز جدیدی نیست و در CSS نسخه ۲.۱ ‬‬&lt;a href=&quot;http://www.w3.org/TR/CSS2/generate.html#propdef-list-style-type&quot;&gt;تعریف شده&lt;/a&gt; است و مقادیر مورد قبول آن هم مشخص شده است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'list-style-type'
  Value:    disc | circle | square | decimal | 
  decimal-leading-zero | lower-roman | upper-roman | 
  lower-greek | lower-latin | upper-latin | armenian | 
  georgian | lower-alpha | upper-alpha | none | inherit
  Initial:      disc
  Applies to:   elements with 'display: list-item'
  Inherited:    yes
  Percentages:      N/A
  Media:    visual
  Computed value:   as specified 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اما در نسخه سوم CSS طبق توضیحی که در شرح این &lt;a href=&quot;https://drafts.csswg.org/css-counter-styles-3&quot;&gt;پیش‌نویس&lt;/a&gt; آمده است مقادیر جدیدی برای این پراپرتی پذیرفته می‌شود، منجمله &lt;em&gt;persian&lt;/em&gt;. بنابراین مقدار این پراپرتی را برابر با &lt;em&gt;persian&lt;/em&gt; قرار می‌دهیم تا به نتیجه دلخواه برسیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
&amp;lt;ol style=&quot;list-style-type:persian&quot; &amp;gt;
&amp;lt;li&amp;gt;آیتم اول&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;آیتم دوم&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;سر آیتم
    &amp;lt;ol style=&quot;list-style-type:persian&quot;&amp;gt;
        &amp;lt;li&amp;gt;زیر آیتم اول&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;زیر آیتم دوم&amp;lt;/li&amp;gt;
    &amp;lt;/ol&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
{% raw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;حالا خروجی ما به شکل زیر در می‌آید که مطلوب ماست:&lt;/p&gt;

&lt;ol style=&quot;list-style-type:persian&quot; &gt;
&lt;li&gt;آیتم اول&lt;/li&gt;
&lt;li&gt;آیتم دوم&lt;/li&gt;
&lt;li&gt;سر آیتم
    &lt;ol style=&quot;list-style-type:persian&quot;&gt;
        &lt;li&gt;زیر آیتم اول&lt;/li&gt;
        &lt;li&gt;زیر آیتم دوم&lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;این پراپرتی کاربردهای گسترده‌تری می‌تواند داشته باشد که با مطالعه ‎&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type&quot;&gt;مقالات سایت توسعه‌دهندگان موزیلا&lt;/a&gt;  می‌توانید با آنها بیشتر آشنا بشوید. در ضمن در همین سایت می‌توانید سایر مقادیر ممکن برای این پراپرتی را ببینید و شاید کارهای جالبی به فکرتان برسد که انجام بدهید.&lt;/p&gt;

&lt;h1&gt;تعریف استیل‌های دلخواه&lt;/h1&gt;

&lt;p&gt;اما این همه‌ی ماجرا نیست. به جز افزوده شدن مقادیر مختلف برای پراپرتی &lt;code&gt;list-style-type&lt;/code&gt;، امکان تعریف مقادیر دلخواه هم فراهم شده است. مقدار این پراپرتی می‌تواند یکی از چهار گزینه زیر باشد:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Symbol()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;اولی برای تعریف درون خطی یک مقدار جدید است. دومی یعنی لیست هیچ استیلی نداشته باشد. سومی هم یک رشته دلخواه را برای هر آیتم لیست نمایش می‌دهد. ما با آخری کار داریم. این گزینه یا یکی از شناسه‌های از پیش تعریف شده است که پیش‌تر اشاره کردیم. یا می‌تواند شناسه‌ای باشد که توسط &lt;code&gt;@counter-style rule&lt;/code&gt; ‬&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style&quot;&gt;تعریف&lt;/a&gt; شده باشد. هر &lt;code&gt;counter-style&lt;/code&gt; (که از اینجا به بعد استیل شماره‌گذاری می‌خوانیمش) یک نام و تعدادی صفت دارد. به کمک این استیل‌های شماره‌گذاری می‌توانیم هر شکل و شمایلی به شماره‌گذاری لیست‌هایمان بدهیم. موزیلا یک &lt;a href=&quot;https://mdn.github.io/css-counter-style-demo/&quot;&gt;سایت نمایشی&lt;/a&gt; هم دارد که می‌توانید استیل‌های مختلف را تغییر بدهید و هم کد و هم خروجی‌اش را ببینید. روش استاندارد تعریف بدینگونه است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@counter-style &amp;lt;counter-style-name&amp;gt; {
  [ system: &amp;lt;counter-system&amp;gt;; ] ||
  [ symbols: &amp;lt;counter-symbols&amp;gt;; ] ||
  [ additive-symbols: &amp;lt;additive-symbols&amp;gt;; ] ||
  [ negative: &amp;lt;negative-symbol&amp;gt;; ] ||
  [ prefix: &amp;lt;prefix&amp;gt;; ] ||
  [ suffix: &amp;lt;suffix&amp;gt;; ] ||
  [ range: &amp;lt;range&amp;gt;; ] ||
  [ pad: &amp;lt;padding&amp;gt;; ] ||
  [ speak-as: &amp;lt;speak-as&amp;gt;; ] ||
  [ fallback: &amp;lt;counter-style-name&amp;gt;; ]
}

where 
&amp;lt;counter-style-name&amp;gt; = &amp;lt;custom-ident&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ما در ادامه مطلب به همین روش حروف ابجد را تعریف و به عنوان استیل شماره‌گذاری از آن استفاده می‌کنیم. تحمل داشته باشید.&lt;/p&gt;

&lt;h1&gt;حروف ابجد&lt;/h1&gt;

&lt;p&gt;ویکی‌پدیای فارسی &lt;a href=&quot;https://fa.wikipedia.org/wiki/%D8%A7%D8%A8%D8%AC%D8%AF&quot;&gt;حروف ابجد&lt;/a&gt; را اینطور معرفی می‌کند: «حروف اَبجَد شیوه‌ای برای مرتب‌سازی حروف زبان عربی است که بر پایه الفبای اولیه خط فنیقی مرتب شده‌اند. گاهی این شیوه در شماره‌گذاری موارد یا صفحات به کار می‌رود.»‏‏[^3] امیدوارم که شما از عربی بودن حروف ابجد نترسید! زبانها جزو شگفت‌انگیزترین دستاوردهای انسان هستند. زبانها تنها مدیومی برای انتقال دانش و اطلاعات در بعد مکان و زمان هستند و باید موقع بررسی آنها این نرخ انتقال اطلاعات فاکتور سنجش ما باشد و نه چیز دیگری.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;حروف اَبجَد شیوه‌ای برای مرتب‌سازی حروف زبان عربی است که بر پایه الفبای اولیه خط فنیقی مرتب شده‌اند. گاهی این شیوه در شماره‌گذاری موارد یا صفحات به کار می‌رود.‏‏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;به گفته ویکی‌پدیای فارسی (و انگلیسی) ترتیب حروف ابجد اینگونه است:&lt;/p&gt;

&lt;p&gt;الف    ب   ج   د   ه   و   ز   ح   ط   ی   ک   ل   م   ن   س   ع   ف   ص   ق   ر   ش   ت   ث   خ   ذ   ض   ظ   غ&lt;/p&gt;

&lt;p&gt;ما هم برای همین ترتیب و با توجه به ارزش عددی هر حرف که در همان مقاله آمده است یک استیل شماره‌گذاری می‌سازیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@counter-style abjad {
  system: additive;
  range: 1 1000;
  additive-symbols: 1000 &quot;\63A&quot;, 900 &quot;\638&quot;, 800 &quot;\636&quot;,
   700 &quot;\630&quot;, 600 &quot;\62E&quot;, 500 &quot;\62B&quot;, 400 &quot;\62A&quot;, 300 &quot;\634&quot;,
   200 &quot;\631&quot;, 100 &quot;\642&quot;, 90 &quot;\635&quot;, 80 &quot;\641&quot;, 70 &quot;\639&quot;,
    60 &quot;\633&quot;, 50 &quot;\646&quot;, 40 &quot;\645&quot;, 30 &quot;\644&quot;,
   20 &quot;\6AF&quot;, 10 &quot;\649&quot;, 9 &quot;\637&quot;, 8 &quot;\62D&quot;, 7 &quot;\698&quot;,
    6 &quot;\648&quot;, 5 &quot;\FEEB&quot;, 4 &quot;\62F&quot;, 3 &quot;\686&quot;,
   2 &quot;\67E&quot;, 1 &quot;\627&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;توجه کنید که بجای خود حروف معادل یونیکد آنها را گذاشته‌ایم. حالا همان لیست اولیه‌مان را با این استیل جدید امتحان می‌کنیم:&lt;/p&gt;

&lt;ol style=&quot;list-style-type:abjad&quot; &gt;
&lt;li&gt;آیتم اول&lt;/li&gt;
&lt;li&gt;آیتم دوم&lt;/li&gt;
&lt;li&gt;سر آیتم
    &lt;ol style=&quot;list-style-type:abjad&quot;&gt;
        &lt;li&gt;زیر آیتم اول&lt;/li&gt;
        &lt;li&gt;زیر آیتم دوم&lt;/li&gt;
    &lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;حُسن خِتام&lt;/h1&gt;

&lt;p&gt;حسن ختام این مطلب هم اشاره به علت نوشتن این پست است. من با دوست خوبم ‏&lt;a href=&quot;http://luthfi.idris.web.id/&quot;&gt;لطفی&lt;/a&gt;، که یک وبلاگ‌نویس اندونزیایی است، قرار گذاشته‌ایم که در ماه ژانویه هر هفته یک پست منتشر کنیم. به قولی شده‌ایم &lt;code&gt;Accountability Partner&lt;/code&gt; یکدیگر. یعنی جویای وبلاگ نویسی یکدیگر می‌شویم و به همدیگر حساب پس می‌دهیم. ابتدا ترس بود از اینکه چه بنویسیم ولی برای من که این وبسایت خودش مطالب خودش را فراهم می‌کند. می‌شود گفت که روزی‌اش را خودش فراهم می‌کند. هربار که می‌خواهم چیزی بنویسم، کارهایی که برای وبسایت کرده‌ام می‌شود بهانه‌ای برای نوشتن یک پست جدید. از جایی که وبسایت هم فنی است خب من هم تنبلی می‌کنم و همانها را به عنوان مقاله می‌نویسم!&lt;/p&gt;

&lt;p&gt;[^1]: Working Group
[^2]: Ordered List&lt;/p&gt;</description>
          <pubDate>2016-01-13 07:30:28</pubDate>
          <link>/mehdix/css-list-style-type.html</link>
          <guid isPermaLink="true">/mehdix/css-list-style-type.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>صفحه‌بندی در جکیل</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من تعطیلات امسالم را بجز بازی شطرنج به مطالعه و گنوم و وبسایتم اختصاص دادم. در نتیجه وبسایت تغییرات ظاهری مختصری داشت به همراه فعال شدن تگ‌ها و صفحه‌بندی.&lt;/p&gt;

&lt;h1&gt;تعطیلات سال نو&lt;/h1&gt;

&lt;p&gt;این روزها در آلمان و بسیاری از نقاط جهان تعطیلات سال نو است. موسسات و ادارات و شرکت‌ها یا تعطیل هستند یا مثل ایام نوروز در ایران کار می‌کنند. بسیاری از دوستان و همکاران نیز یا جهت سپری ایام کریسمس نزد خانواده‌هایشان رفته‌اند یا اینکه فرصت را غنیمت شمرده و سفری برای خودشان ترتیب داده‌اند. من هم از ۲۴ دسامبر تا روز چهارم ژانویه تعطیل هستم. بنابراین من هم وقت کافی داشتم که به خیلی از خرده کارهای معوّق رسیدگی کنم و به قول معروف &lt;code&gt;Get Things Done (GTD)&lt;/code&gt; کنم. از این فرصت هم استفاده می‌کنم و به خواننده این مطلب به دلیل اینکه خارج از ایران زندگی می‌کند و یا در ایران است اما به هر دلیل با تقویم میلادی زندگی می‌کند یا آنرا دنبال می‌کند سال نو را تبریک می‌گویم.&lt;/p&gt;

&lt;h1&gt;صفحه‌بندی&lt;/h1&gt;

&lt;p&gt;منظور من از صفحه‌بندی اضافه‌کردن لینک‌هایی به پست‌های وبسایت است که بتوان با کلیک روی آنها به مطلب قبلی یا بعدی مراجعه کرد. معمولا رایج است که تعدادی پست را در صفحه اصلی وبسایت نمایش می‌دهند و در انتها نیز لینکی به صفحه بعدی می‌گذارند که شامل تعداد دیگری پست است. البته من در صفحه اصلی در حال حاضر فقط لیستی موجز از مطالب نمایش می‌دهم و این قابلیت را هنوز فعال نکرده‌ام و به همان لینک مطالب قبلی و بعدی در پای پست‌ها اکتفا کرده‌ام. ولی هر دو را شرح می‌دهم.&lt;/p&gt;

&lt;p&gt;جکیل به صورت پیش‌فرض از صفحه‌بندی پشتیبانی می‌کند، فقط کافیست آنرا در فایل &lt;code&gt;_config.yml&lt;/code&gt; فعال کنید:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;paginate: 5
paginate_path: &quot;/page:num/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اولی یعنی پنج مطلب در هر صفحه نمایش بده و دیگری هم فرمت لینک هر صفحه است. اما هنوز یک قدم تا داشتن صفحه‌بندی مانده است. باید تغییراتی در قالب سایت بدهیم. من تغییرات زیر را در فایل &lt;code&gt;index.html&lt;/code&gt; انجام می‌دهم تا فقط پنج پست در صفحه اصلی نمایش داده بشود.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
---
layout: default
---

&amp;lt;div class=&quot;home&quot;&amp;gt;

  &amp;lt;h1 class=&quot;page-heading&quot;&amp;gt;❖&amp;amp;nbsp چکیده‌ی آخرین نوشته‌ها&amp;lt;/h1&amp;gt;

  &amp;lt;ul class=&quot;post-list&quot;&amp;gt;
    {% for post in paginator.posts %}
      &amp;lt;li&amp;gt;
        &amp;lt;span class=&quot;post-meta&quot;&amp;gt;
        &amp;lt;span class=&quot;date&quot;&amp;gt;{{ post.date | jdate: &quot;%A %d %b %Y&quot; | habify }}
        &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;

        &amp;lt;h2&amp;gt;
          &amp;lt;a class=&quot;post-link&quot; 
            href=&quot;{{ site.baseurl | urljoin: post.url}}&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
        &amp;lt;/h2&amp;gt;
        {{ post.excerpt }}
      &amp;lt;/li&amp;gt;
    {% endfor %}
  &amp;lt;/ul&amp;gt;{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;می‌بینید که مهمترین تغییر استفاده از &lt;code&gt;paginator.posts&lt;/code&gt; بجای &lt;code&gt;site.posts&lt;/code&gt; است. خلاصه مطلب اینست که متغیر گلوبال &lt;code&gt;paginator&lt;/code&gt; حاوی همه‌ی اطلاعاتی است که ما احتیاج داریم. برای نمایش یک لیست کوچک در انتهای صفحه هم کد زیر را به انتهای فایل اضافه می‌کنم. در این مورد هم از همین متغیر استفاده کرده‌ام.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
&amp;lt;!-- Pagination links --&amp;gt;
&amp;lt;div class=&quot;pagination center&quot;&amp;gt;
  {% if paginator.previous_page %}
    &amp;lt;a href=&quot;{{ paginator.previous_page_path }}&quot; class=&quot;previous&quot;&amp;gt;جدیدتر&amp;lt;/a&amp;gt;
  {% else %}
    &amp;lt;span class=&quot;previous&quot;&amp;gt;جدیدتر ندارد&amp;lt;/span&amp;gt;
  {% endif %}
  &amp;amp;nbsp❖&amp;amp;nbsp&amp;lt;span class=&quot;page_number &quot;&amp;gt;
  برگه‌ی {{ paginator.page | habify}} از {{ paginator.total_pages | habify}}
  &amp;lt;/span&amp;gt; 
  &amp;amp;nbsp❖&amp;amp;nbsp
  {% if paginator.next_page %}
    &amp;lt;a href=&quot;{{ paginator.next_page_path }}&quot; class=&quot;next&quot;&amp;gt;قدیمی‌تر&amp;lt;/a&amp;gt;
  {% else %}
    &amp;lt;span class=&quot;next &quot;&amp;gt;قدیمی‌تر ندارد&amp;lt;/span&amp;gt;
  {% endif %}
&amp;lt;/div&amp;gt;{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در این مورد هم می‌بینید که تعداد کل برگه‌های موجود را از &lt;code&gt;paginator.page&lt;/code&gt; می‌خوانم و وجود صفحه قبلی و بعدی را هم از &lt;code&gt;paginator.previous_page&lt;/code&gt; و &lt;code&gt;paginator.next_page&lt;/code&gt; می‌خوانم. شماره برگه‌ی فعلی هم در &lt;code&gt;paginator.page&lt;/code&gt; موجود است.&lt;/p&gt;

&lt;p&gt;در ضمن از بکارگیری فیلتری بنام ‫‫&lt;em&gt;habify&lt;/em&gt; تعجب نکنید. این یک پلاگین کوچک است برای تبدیل کردن ارقام لاتین به معادل فارسی که در دایرکتوری &lt;code&gt;_plugins/hinduarabic.rb&lt;/code&gt; پیدایش می‌کنید.&lt;/p&gt;

&lt;h1&gt;لینک به پست‌های قبلی و بعدی&lt;/h1&gt;

&lt;p&gt;الان اگر هر پستی را باز کنید پای هر مطلب دو لینک وجود دارد که به ترتیب زمانی نوشته شدن به مطالب قبلی و بعدی اشاره می‌کنند. اضافه کردن این‌ها خیلی ساده است و فقط کافیست از اطلاعات موجود در متغیر گلوبال &lt;code&gt;page&lt;/code&gt; استفاده کنیم.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
  &amp;lt;div style=&quot;border-top:1px dotted;&quot;&amp;gt;
    &amp;lt;p&amp;gt;
      {% if page.next %}
      &amp;lt;a href=&quot;{{ page.next.url }}&quot; style=&quot;float: left&quot;&amp;gt; 
        {{ page.next.title }} &amp;gt;&amp;gt; &amp;lt;/a&amp;gt;
      {% endif %}

      {% if page.previous %}
      &amp;lt;a href=&quot;{{ page.previous.url }}&quot; style=&quot;margin-right:0px;&quot;&amp;gt;
        &amp;amp;#60&amp;amp;#60     {{ page.previous.title }}&amp;lt;/a&amp;gt;
      {% endif %}
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;تنها چیزی که در قطعه کد بالا نیاز به توضیح دارد &lt;code&gt;&amp;amp;#60&amp;amp;#60&lt;/code&gt; است. آنهم چیزی نیست دوبار تکرار کد اسکی کاراکتر &lt;code&gt;&amp;lt;&lt;/code&gt; چرا که در صورت وارد کردن این کاراکتر پارس کردن صفحه توسط مرورگر دچار اختلال می‌شود (چرا که آن را با یک شروع یک تگ html اشتباه می‌گیرد).&lt;/p&gt;

&lt;p&gt;برای شرح کامل صفحه‌بندی به &lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;مستندات جکیل&lt;/a&gt; مراجعه کنید.&lt;/p&gt;</description>
          <pubDate>2016-01-02 07:30:28</pubDate>
          <link>/mehdix/pagination.html</link>
          <guid isPermaLink="true">/mehdix/pagination.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>برچسب‌زنی به لینک‌ها</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;من به موضوعات مروبوط به جمع‌آوری و سازماندهی و مدیریت اطلاعات علاقه دارم. همه ما هر روز سایت‌ها و لینک‌های بسیاری را بازدید می‌کنیم و آنها را به اشتراک می‌گذاریم. اما مراجعه دوباره به آنها کار ساده‌ای نیست.&lt;/p&gt;

&lt;p&gt;یکی از کارهایی که دوست دارم قادر به انجامش باشم اینست که بتوانم هر سایتی را که قبلا بازدید کرده‌ام و هر داده‌ای را که روزی پردازش کرده‌ام بتوانم هر زمان که نیاز دارم دوباره بازیابی کنم. اما مشکل اینجاست که نمی‌توانم آنها را دوباره پیدا کنم! برای مدیریت داده‌های شخصی هم تابحال راه‌حل‌های مختلفی را امتحان کرده‌ام. مثلا مدتهاست که از نرم‌افزار &lt;a href=&quot;http://zim-wiki.org/&quot;&gt;Zim&lt;/a&gt; استفاده می‌کنم. این برنامه یک ویکی شخصی است که قابلیت‌های فراوانی دارد. مثلا می‌تواند مثل یک ژورنال به تاریخ روز مطلبی را ذخیره کند. فرمت ویکی را می‌فهمد و پلاگین‌های مختلفی برای توکار کردن نمودارها و انجام کارهای مختلف دارد. دفترچه‌های مختلفی می‌توان تعریف کردن و آنها را نیز در فایل‌های متنی ذخیره می‌کند. در ضمن از گیت هم پشتیبانی می‌کند. من برای یادداشت‌هایم در زیم یک هوک گیت تعریف کردم که پس از ثبت هر تغییری برنامه مخزن گیت ریموت من را بروزرسانی کند. البته الان قصد معرفی امکانات زیم را ندارم.&lt;/p&gt;

&lt;p&gt;مدتی هم از Mindmap و سایت‌های آنلاین برای مدیریت اطلاعات استفاده می‌کردم. مشکل اینجا بود که جستجوی داده‌ها معمولا راحت نبود. لااقل صرف نمی‌کرد سایت یا فایل را باز کنی و دنبال لینک مورد نظر بگردی.&lt;/p&gt;

&lt;p&gt;به تازگی به روش‌های مبتنی بر جستوی متنی یا Full Text Search علاقه‌مند شده‌ام. مثلا ادیتور مورد علاقه‌ام در حال حاضر &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; است (متن حاضر را در gedit می‌نویسم). من معمولا از منوهای این برنامه استفاده نمی‌کنم بلکه دائم با فشردن Ctrl-Shift-P جعبه‌ی دستورات برنامه را باز می‌کنم و شروع به تایپ کردن می‌کنم و برنامه هم همزمان با تایپ من گزینه‌های مربوط را نمایش می‌دهد. به این ترتیب بدون اتلاف وقت در میان منوها به آنچه می‌خواهم می‌رسم. گذشته از اینکه بسیاری از این دستورات مربوط به پلاگین‌های برنامه هستند و اصلا در منوها وجود ندارند. من این روش را برای طراحی UI بسیار می‌پسندم. اگر به طراحی رابط کاربری علاقه دارید پیشنهاد می‌کنم مقاله‌ی Joel (بنیان‌گذار استک اوورفلو و ترللو) بنام &lt;a href=&quot;http://www.joelonsoftware.com/uibook/chapters/fog0000000059.html&quot;&gt;Choices&lt;/a&gt; و نیز مقاله‌ی &lt;a href=&quot;http://ometer.com/preferences.html&quot;&gt;Preferences&lt;/a&gt; از Havoc Pennington که طراح Metacity است را بخوانید.&lt;/p&gt;

&lt;p&gt;امروزه برنامه‌های بیشتری جستجو را به عنوان رابط کاربری اصلی خود انتخاب می‌کنند. مهمترین برنامه‌ای که می‌توانم نام ببرم، دسکتاپ محبوب من، GNOME 3 است. در این دسکتاپ رابط اصلی کاربر با امکانات دسکتاپ چیزی جز صفحه‌ی جستجو نیست. در گنوم جستجو شامل اطلاعات آنلاین و آفلاین و کانتکت‌ها و کاراکترهای یونیکد (جستجوی شرح آنها) و برنامه‌ها و مستندات و بسیار چیزهای دیگر می‌شود. این نوع جستجو در گنوم ۳ در برنامه مدیریت فایل‌های ناتیلوس هم پیاده شده است. کافی است با باز کردن آن شروع به تایپ کنید، جستجو شروع می‌شود و نایج مرتبط دائم نمایش داده می‌شوند. در این مورد بعدها بیشتر خواهم نوشت.&lt;/p&gt;

&lt;p&gt;حالا برگردیم سراغ لینک‌ها. من در گذشته خیلی وقت صرف ثبت لینک‌ها در فایرفاکس و کروم می‌کردم ولی کمتر پیش می‌آمد که از آنها استفاده کنم چون جستجویشان کار سختی بود. بگذریم که چند باری هم اطلاعاتم از بین رفت و کم کم تمایلم را برای دسته‌بندی مجدد لینک‌ها از دست دادم. ولی بتازگی روش بسیار بهتری مبتنی بر تگ کردن لینک‌ها یافته‌ام. اول اینکه برای خودم یک عادت جدید تعریف کرده‌ام؛ هیچ لینکی را ذخیره نمی‌کنم مگر اینکه چند برچسب کلیدی به آن بزنم. در فایرفاکس اینکار با دوبار فشار دادن ستاره‌ی بوکمارک امکانپذیر می‌شود.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;برای خودم یک عادت جدید تعریف کرده‌ام؛ هیچ لینکی را ذخیره نمی‌کنم مگر اینکه چند برچسب کلیدی به آن بزنم.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;حالا هر وقت می‌خواهم لینکی را پیدا کنم فقط کافیست Ctrl-B را بزنم و شروع به تایپ کنم. فکر می‌کنم که دوباره لینک‌ها را جمع‌آوری کنم.&lt;/p&gt;</description>
          <pubDate>2015-12-29 07:30:28</pubDate>
          <link>/mehdix/link-tagging.html</link>
          <guid isPermaLink="true">/mehdix/link-tagging.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
        <item>
          <title>حق دسترسی فایل‌ها در لینوکس به زبان ساده (۲)</title>
          <description>&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;هفت ماه پیش راهنمایی در مورد حق دسترسی‌ها در لینوکس نوشته بودم. این بار قصد دارم نگاه دقیق‌تری به همان موضوع داشته باشم و بکارگیری معادل عددی دسترسی‌ها را بجای حروف اختصار شرح بدهم.&lt;/p&gt;

&lt;p&gt;در مقاله گذشته در مورد حق مالکیت و گروه‌های کاربری و حق دسترسی صحبت کردیم. اینبار قصد داریم همان موضوع را کمی بازتر کنیم و یاد بگیریم چطور معادل‌های عددی برای دسترسی‌ها را بفهمیم و بکار ببریم. &lt;/p&gt;

&lt;h2&gt;تاریخچه حق دسترسی&lt;/h2&gt;

&lt;p&gt;سیستم‌ عامل یونیکس و سیستم‌عامل‌های مشابه همچون لینوکس و آنهایی که استاندارد پوزیکس را پیاده می‌کنند از ابتدا نه تنها امکان چند وظیفه‌گی&lt;a href=&quot;Multi-tasking&quot;&gt;^1&lt;/a&gt; را پیاده کردند بلکه از همان ابتدا چند کاربره بودند. چرا که کامپیوترهای اولیه گران‌قیمت و بزرگ بودند و غالبا آنها را می‌شد در دانشگاه‌ها یا موسسات بزرگ پیدا کرد. کاربران می‌بایست از ترمینال‌های مختلف به این کامپیوترها متصل می‌شدند و منابع آن را با هم شریک می‌شدند. بنابراین چند کاربرگی یک نیاز اولیه بود که در طراحی این سیستم‌ها در نظر گرفته شد (نه چیزی که بعدا به فکرشان برسد و بخواهند به سیستم اضافه کنند). این سیستم‌ها طوری طراحی شدند که بتوان هر کاربر را از فعالیت و تغییرات دیگر کاربران مصون نگه داشت. به همین خاطر حق مالکیت و حق دسترسی ایجاد شد و هر کاربر دارای یک پوشه‌ی خانه شد که فقط حق تغییر محتوای آنرا داشت. برای دسترسی به سایر اجزاء سیستم از قبیل دستگاه‌های جانبی و فایل‌های سیستم‌عامل و مانند اینها این مدیر سیستم بود که باید وارد عمل می‌شد و اجازه اینکار را صادر می‌کرد. به این ترتیب امکان استفاده مشترک از منابع کامپیوترهای اولیه امکانپذیر شد.&lt;/p&gt;

&lt;h2&gt;مالک و گروه و دیگران&lt;/h2&gt;

&lt;p&gt;در مدل امنیتی لینوکس کاربران می‌توانند مالک فایل‌ها باشند و مالک تعیین می‌کند چه کسی به فایل دسترسی داشته باشد. این شامل تعیین حق دسترسی برای خود مالک و گروهی که فایل به آن تعلق دارد و نیز سایر کاربران می‌شوند. اینها را به تفضیل در بخش قبلی شرح دادیم. حال اگر دستور &lt;code&gt;id&lt;/code&gt; را در ترمینال وارد کنیم اطلاعات کاربر جاری را می‌بینم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mehdi@debian:~/workspace/mehdix.ir/_drafts$ id
uid=1000(mehdi) gid=1000(mehdi) groups=1000(mehdi),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),110(lpadmin),113(scanner),118(bluetooth),999(bumblebee),1001(docker)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اما یک کاربر تازه ساخته شده عضو گروه‌های محدودتری است که به نوع سیستم عامل بستگی دارد. مثلا در دبیان یک کاربر جدید مشخصات زیر را دارد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;me@debian:/home/mehdi/workspace/mehdix.ir/_drafts$ id
uid=1001(me) gid=1002(me) groups=1002(me)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;همانطور که می‌بینیم هر کاربر یک &lt;code&gt;uid&lt;/code&gt; دارد که شماره ایست که به او اختصاص داده شده است و سیستم عامل با آن شماره کاربر را می‌شناسد. دقت کنید که کاربر &lt;em&gt;mehdi&lt;/em&gt; کد ۱۰۰۰ و کاربر &lt;em&gt;me&lt;/em&gt; کد ۱۰۰۱ را دارد. چون دبیان به اولین کاربر کد ۱۰۰۰ را اختصاص می‌دهد و برای بعدی ۱۰۰۱ و همینطور الی آخر. این عدد در اوبونتو از ۵۰۰ شروع می‌شود. علاوه بر این هر کاربر یک &lt;code&gt;gid&lt;/code&gt; دارد که گروه اصلی او محسوب می‌شود. هر کاربر می‌تواند در گروه‌های دیگری نیز عضویت داشته باشد که لیست آنها در مقابل &lt;code&gt;groups&lt;/code&gt; آمده است.&lt;/p&gt;

&lt;p&gt;برای دانستن منشاء این اطلاعات باید به فایل‌های دیگری رجوع کنیم. فایل &lt;code&gt;/etc/passwd&lt;/code&gt; مشخصات حساب‌های کاربری را در خود دارد و فایل &lt;code&gt;/etc/groups&lt;/code&gt; گروه‌های موجود در سیستم را و فایل &lt;code&gt;/etc/shadow&lt;/code&gt; اطلاعات مربوط به رمزعبور کاربران را. هنگام ساخت یک کاربر جدید این فایل‌ها تغییر می‌کنند. فایل &lt;code&gt;/etc/passwd&lt;/code&gt; حاوی اطلاعات اسم عبور و &lt;code&gt;uid&lt;/code&gt; و &lt;code&gt;gid&lt;/code&gt; و اسم واقعی کاربر و پوشه خانه و همچنین شِل کاربر است. در این فایل کاربران پیش‌فرضی هم که در سیستم تعریف شده‌اند وجود دارند از جمله کاربر صفر که کاربر روت است.&lt;/p&gt;

&lt;h2&gt;بیت‌های حق دسترسی&lt;/h2&gt;

&lt;p&gt;در سیستم‌فایل‌های شبیه به یونیکس (مثل لینوکس) ساختمان داده‌ای وجود دارد بنام &lt;a href=&quot;https://fa.wikipedia.org/wiki/%D8%A2%DB%8C%E2%80%8C%D9%86%D9%88%D8%AF&quot;&gt;آی‌نود&lt;/a&gt;
&lt;a href=&quot;inode&quot;&gt;^2&lt;/a&gt;.
 این ساختمان داده برای نگهداری اطلاعات در مورد اشیاء سیستمی بکار می‌رود که می‌توانند چیزهای مختلفی باشند از جمله فایل‌ و دایرکتوری‌. در این ساختمان داده بخشی وجود دارد برای نگهداری «مود» هر شیء. محتوای این بخش مشخص می‌کند که کدام کاربران می‌توانند به داده‌های مورد اشاره در این &lt;em&gt;inode&lt;/em&gt; دسترسی داشته باشند. ما به طور مستقیم با این ساختمان داده کاری نداریم اما وقتی دستور &lt;code&gt;ls -l&lt;/code&gt; را وارد می‌کنیم، ده کاراکتری که در ابتدای خروجی مشاهده می‌کنیم در حقیقت از ساختمان داده بالا آمده‌اند:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;me@debian:/home/mehdi/workspace/mehdix.ir/_drafts$ ls -l
-rw-r--r-- 1 mehdi mehdi   200 Jun 10 22:13 jekyll-rtl.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;به ده کاراکتر اول خروجی «مشخصات فایل»[^3] گفته می‌شود. کاراکتر اول نوع فایل را مشخص می‌کند که در جدول زیر آمده است:&lt;/p&gt;

&lt;p&gt;|کاراکتر|نوع فایل
|-| یک فایل معمولی
|d|یک دایرکتوری
|l|یک لینک سمبلیک. نکته مهم اینکه لینک‌ها حق دسترسی جداگانه ندارند و حق دسترسی فایل اصلی شرط است. برای یک لینک حق دسترسی همیشه rwxrwxrwx است.
|c|فایل خاص کاراکتری. نماینده سخت‌افزاری است که با داده‌ها به صورت جریانی از بایت‌ها برخورد می‌کند، مانند یک مودم.
|b|فایل خاص بلوکی. نماینده سخت‌افزاری است که با داده‌ها به صورت بلوکی رفتار می‌کند، مانند سی‌دی‌رام و دیسک سخت.&lt;/p&gt;

&lt;p&gt;نُه کاراکتر بعدی «مودِ فایل»[^4] نامیده می‌شود. سه کاراکتر اول شامل حق خواندن و نوشتن و اجرا کردن برای مالک فایل، سه تای بعدی همین‌ها برای گروه فایل و سه تای آخری هم به همین ترتیب برای سایر کاربران است.&lt;/p&gt;

&lt;p&gt;در اینجا بد نیست که مروری هم داشته باشیم بر تفاوت‌های حق دسترسی‌ها برای فایل‌ها و دایرکتوری‌ها.&lt;/p&gt;

&lt;p&gt;| کاراکتر| برای فایل‌ها| برای دایرکتوری‌ها
| r| امکان باز کردن و خواندن محتوای یک فایل| اجازه لیست کردن محتوای دایرکتوری را می‌دهد به شرط اینکه مشخصه اجرایی (x) برای دایرکتوری ست شده باشد.
|w|اجازه نوشتن روی یک فایل یا حذف محتوای آنرا می‌دهد. این مشخصه امکان تغییر نام یا حذف فایل را  نمی‌دهد. این موارد توسط مشخصات دایرکتوری روشن می‌شود.| اجازه ایجاد و تغییر نام و حذف فایل‌های داخل یک دایرکتوری را می‌دهد به شرط اینکه مشخه اجرایی (x)
|x|اجازه می‌دهد با یک فایل مثل یک برنامه رفتار کنیم. نکته جالب اینکه اگر فایل اسکریپت باشد − مثل پایتون − باید علاوه بر این قابل خواندن هم باشد. چرا که اینگونه فایل‌ها در ابتدا خوانده شده و سپس توسط برنامه دیگری اجرا می‌شوند.| اجازه وارد شدن به یک دایرکتوری را می‌دهد، مثلا با دستور cd&lt;/p&gt;

&lt;h2&gt;معادل عددی حق دسترسی&lt;/h2&gt;

&lt;p&gt;از جایی که در بخش اول جزئیات حق دسترسی را شرح داده‌ایم در اینجا معادل‌های عددی آنها را شرح می‌دهیم. نمایش عددی حق دسترسی‌ها در مبنای هشت است بنابراین باید با این دستگاه اعداد آشنا بشویم.&lt;/p&gt;

&lt;h3&gt;دستگاه اعداد مبنای هشت&lt;/h3&gt;

&lt;p&gt;برای فهم مبناهای مختلف در دستگاه‌های اعداد کافیست به تعداد انگشتانمان نگاه کنیم. ما و اجدادمان ده انگشت داریم، به همین خاطر شمارش را با آنها شروع کردیم و مبنای دستگاه اعدادمان شد ده. کامپیوتر از سوی دیگر فقط یک انگشت دارد که آنرا در دو حالت ۰ و ۱ بکار می‌برد و دستگاه اعدادش می‌شود دودویی یا باینری. اگر ما هشت انگشت داشتیم دستگاه اعداد ما می‌شد &lt;a href=&quot;https://fa.wikipedia.org/wiki/%D8%AF%D8%B3%D8%AA%DA%AF%D8%A7%D9%87_%D8%A7%D8%B9%D8%AF%D8%A7%D8%AF_%D9%BE%D8%A7%DB%8C%D9%87_%DB%B8&quot;&gt;مبنای هشت&lt;/a&gt;&lt;a href=&quot;Octal&quot;&gt;^5&lt;/a&gt; و اگر شانزده تا داشتیم می‌شد مبنای شانزده یا &lt;em&gt;hexadecimal&lt;/em&gt;.
مهمترین علت بکارگیری دستگاه‌های اعداد پایه هشت و شانزده جهت آسودگی کار با کامپیوتر است. مثلا بجای 01011111 در دستگاه &lt;em&gt;hex&lt;/em&gt; می‌توان نوشت 5F یا بجای 111000000 می‌توان نوشت 700.&lt;/p&gt;

&lt;p&gt;از جایی که هر رقم در مبنای هشت با سه بیت نمایش داده می‌شود، این دستگاه اعداد روش خوبی برای نمایش مود فایل است. همانطور که پیشتر دیدیم مود فایل با نُه بیت نشان داده می‌شود که در مبنای هشت می‌توان آنرا به سه رقم نمایش داد. بسیاری از مدیران سیستم برای تغییر حق دسترسی فایل‌ها از این اعداد استفاده می‌کنند چون پس از یادگیری ساده‌تر و گویاتر است. جدول زیر نمایش حق دسترسی‌ها در مبنای هشت است.&lt;/p&gt;

&lt;p&gt;{:.ltr .center}
|مبنای هشت|دودویی|مود فایل
|0|000|---
|1|001|--x
|2|010|-w-
|3|011|-wx
|4|100|r--
|5|101|r-w
|6|110|rw-
|7|111|rwx&lt;/p&gt;

&lt;p&gt;حالا می‌توان در تمام دستورات مربوط به حق دسترسی به جای حروف اختصار مستقیما از این اعداد استفاده کرد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mehdi@debian:~$ &amp;gt; foo.txt
mehdi@debian:~$ ls -l foo.txt 
-rw-r--r-- 1 mehdi mehdi 0 Aug 30 22:42 foo.txt
mehdi@debian:~$ chmod 600 foo.txt 
mehdi@debian:~$ ls -l foo.txt 
-rw------- 1 mehdi mehdi 0 Aug 30 22:42 foo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;پی‌نوشت: من در این مطلب از کتاب بسیار خوب The Linux Command Line کمک گرفتم که از &lt;a href=&quot;http://linuxcommand.org&quot;&gt;سایت کتاب&lt;/a&gt; به رایگان قابل &lt;a href=&quot;http://sourceforge.net/projects/linuxcommand/files/TLCL/13.07/TLCL-13.07.pdf/download&quot;&gt;دانلود&lt;/a&gt; است.&lt;/p&gt;

&lt;p&gt;[^3]: File attributes
[^4]: File mode&lt;/p&gt;</description>
          <pubDate>2015-08-30 07:30:28</pubDate>
          <link>/mehdix/linux-permissions-made-simple-part-two.html</link>
          <guid isPermaLink="true">/mehdix/linux-permissions-made-simple-part-two.html</guid>		
		<category>		</category>
				
		<tags>		</tags>
		        </item>
    
  </channel>
</rss>